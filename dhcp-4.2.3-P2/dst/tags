!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Assert	base64.c	71;"	d	file:
Base64	base64.c	/^static const char Base64[] =$/;"	v	file:
DST_NUMBER_OF_COUNTERS	prandom.c	48;"	d	file:
DST_NUM_HASHES	prandom.c	45;"	d	file:
DST_RANDOM_BLOCK_SIZE	prandom.c	60;"	d	file:
DST_RANDOM_PATTERN	prandom.c	74;"	d	file:
DST_SHIFT	prandom.c	67;"	d	file:
HMAC_IPAD	hmac_link.c	51;"	d	file:
HMAC_Key	hmac_link.c	/^} HMAC_Key;$/;"	t	typeref:struct:hmackey	file:
HMAC_LEN	hmac_link.c	50;"	d	file:
HMAC_OPAD	hmac_link.c	52;"	d	file:
INIT_DATA_A	md5_dgst.c	96;"	d	file:
INIT_DATA_B	md5_dgst.c	97;"	d	file:
INIT_DATA_C	md5_dgst.c	98;"	d	file:
INIT_DATA_D	md5_dgst.c	99;"	d	file:
MAX_OLD	prandom.c	79;"	d	file:
MD5_Final	md5_dgst.c	/^void MD5_Final(md, c)$/;"	f
MD5_Init	md5_dgst.c	/^void MD5_Init(c)$/;"	f
MD5_LEN	hmac_link.c	53;"	d	file:
MD5_Update	md5_dgst.c	/^void MD5_Update(c, data, len)$/;"	f
MD5_version	md5_dgst.c	/^const char *MD5_version="MD5 part of SSLeay 0.8.1 19-Jul-1997";$/;"	v
NEED_PRAND_CONF	prandom.c	36;"	d	file:
Pad64	base64.c	/^static const char Pad64 = '=';$/;"	v	file:
_MD5_H_	hmac_link.c	46;"	d	file:
b64_ntop	base64.c	/^b64_ntop(u_char const *src, size_t srclength, char *target, size_t targsize) {$/;"	f
b64_pton	base64.c	/^b64_pton(src, target, targsize)$/;"	f
block	prandom.c	/^	int digested, block, step, curr;$/;"	m	struct:hash	file:
bytes	prandom.c	/^	unsigned needed, filled, bytes;$/;"	m	struct:work	file:
cmds	prandom.c	/^static const char *cmds[] = {$/;"	v	file:
ctx	prandom.c	/^	void *ctx;$/;"	m	struct:hash	file:
curr	prandom.c	/^	int digested, block, step, curr;$/;"	m	struct:hash	file:
digest_file	prandom.c	/^digest_file(dst_work *work) $/;"	f	file:
digested	prandom.c	/^	int digested, block, step, curr;$/;"	m	struct:hash	file:
dirs	prandom.c	/^static const char *dirs[] = {$/;"	v	file:
do_hash	prandom.c	/^do_hash(dst_work *work, prand_hash *hash, const u_char *input, unsigned size)$/;"	f	file:
do_ls	prandom.c	/^do_ls(dst_work *work)$/;"	f	file:
do_time	prandom.c	/^do_time(dst_work *work)$/;"	f	file:
done_init	dst_api.c	/^static int done_init = 0;$/;"	v	file:
dst_buffer_to_hmac_md5	hmac_link.c	/^dst_buffer_to_hmac_md5(DST_KEY *dkey, const u_char *key, const unsigned keylen)$/;"	f	file:
dst_buffer_to_key	dst_api.c	/^dst_buffer_to_key(const char *key_name,		\/* name of the key *\/$/;"	f
dst_check_algorithm	dst_api.c	/^dst_check_algorithm(const int alg)$/;"	f
dst_compare_keys	dst_api.c	/^dst_compare_keys(const DST_KEY *key1, const DST_KEY *key2)$/;"	f
dst_dnskey_to_key	dst_api.c	/^dst_dnskey_to_key(const char *in_name,$/;"	f
dst_free_key	dst_api.c	/^dst_free_key(DST_KEY *f_key)$/;"	f
dst_generate_key	dst_api.c	/^dst_generate_key(const char *name, const int bits, const int exp,$/;"	f
dst_hmac_md5_compare_keys	hmac_link.c	/^dst_hmac_md5_compare_keys(const DST_KEY *key1, const DST_KEY *key2)$/;"	f	file:
dst_hmac_md5_free_key_structure	hmac_link.c	/^dst_hmac_md5_free_key_structure(void *key)$/;"	f	file:
dst_hmac_md5_generate_key	hmac_link.c	/^dst_hmac_md5_generate_key(DST_KEY *key, const int nothing)$/;"	f	file:
dst_hmac_md5_init	hmac_link.c	/^dst_hmac_md5_init()$/;"	f
dst_hmac_md5_init	hmac_link.c	/^dst_hmac_md5_init(){$/;"	f
dst_hmac_md5_key_from_file_format	hmac_link.c	/^dst_hmac_md5_key_from_file_format(DST_KEY *dkey, const char *buff,$/;"	f	file:
dst_hmac_md5_key_to_file_format	hmac_link.c	/^dst_hmac_md5_key_to_file_format(const DST_KEY *dkey, char *buff,$/;"	f	file:
dst_hmac_md5_sign	hmac_link.c	/^dst_hmac_md5_sign(const int mode, DST_KEY *d_key, void **context, $/;"	f	file:
dst_hmac_md5_to_dns_key	hmac_link.c	/^dst_hmac_md5_to_dns_key(const DST_KEY *in_key, u_char *out_str,$/;"	f	file:
dst_hmac_md5_verify	hmac_link.c	/^dst_hmac_md5_verify(const int mode, DST_KEY *d_key, void **context,$/;"	f	file:
dst_init	dst_api.c	/^dst_init()$/;"	f
dst_key_to_buffer	dst_api.c	/^dst_key_to_buffer(DST_KEY *key, u_char *out_buff, unsigned buf_len)$/;"	f
dst_key_to_dnskey	dst_api.c	/^dst_key_to_dnskey(const DST_KEY *key, u_char *out_storage,$/;"	f
dst_path	dst_api.c	/^const char *dst_path = "";$/;"	v
dst_random	dst_api.c	/^dst_random(const int mode, unsigned wanted, u_char *outran)$/;"	f
dst_read_key	dst_api.c	/^dst_read_key(const char *in_keyname, const unsigned in_id, $/;"	f
dst_s_build_filename	dst_support.c	/^dst_s_build_filename(char *filename, const char *name, unsigned id,$/;"	f
dst_s_calculate_bits	dst_support.c	/^dst_s_calculate_bits(const u_char *str, const int max_bits)$/;"	f
dst_s_conv_bignum_b64_to_u8	dst_support.c	/^dst_s_conv_bignum_b64_to_u8(const char **buf,$/;"	f
dst_s_conv_bignum_u8_to_b64	dst_support.c	/^dst_s_conv_bignum_u8_to_b64(char *out_buf, const unsigned out_len,$/;"	f
dst_s_dns_key_id	dst_support.c	/^dst_s_dns_key_id(const u_char *dns_key_rdata, const unsigned rdata_len)$/;"	f
dst_s_filename_length	dst_support.c	/^dst_s_filename_length(const char *name, const char *suffix)$/;"	f
dst_s_fopen	dst_support.c	/^dst_s_fopen(const char *filename, const char *mode, unsigned perm)$/;"	f
dst_s_get_int16	dst_support.c	/^dst_s_get_int16(const u_char *buf)$/;"	f
dst_s_get_int32	dst_support.c	/^dst_s_get_int32(const u_char *buf)$/;"	f
dst_s_get_key_struct	dst_api.c	/^dst_s_get_key_struct(const char *name, const int alg, const u_int32_t flags,$/;"	f	file:
dst_s_id_calc	dst_support.c	/^dst_s_id_calc(const u_char *key, const unsigned keysize)$/;"	f
dst_s_put_int16	dst_support.c	/^dst_s_put_int16(u_int8_t *buf, const u_int16_t val)$/;"	f
dst_s_put_int32	dst_support.c	/^dst_s_put_int32(u_int8_t *buf, const u_int32_t val)$/;"	f
dst_s_quick_random	prandom.c	/^dst_s_quick_random(int inc)$/;"	f
dst_s_quick_random_set	prandom.c	/^dst_s_quick_random_set(u_int32_t val, u_int32_t cnt)$/;"	f
dst_s_random	prandom.c	/^dst_s_random(u_char *output, unsigned size)$/;"	f
dst_s_read_private_key_file	dst_api.c	/^dst_s_read_private_key_file(char *name, DST_KEY *pk_key, unsigned in_id,$/;"	f	file:
dst_s_read_public_key	dst_api.c	/^dst_s_read_public_key(const char *in_name, const unsigned in_id, int in_alg)$/;"	f	file:
dst_s_semi_random	prandom.c	/^dst_s_semi_random(u_char *output, unsigned size)$/;"	f
dst_s_verify_str	dst_support.c	/^dst_s_verify_str(const char **buf, const char *str)$/;"	f
dst_s_write_private_key	dst_api.c	/^dst_s_write_private_key(const DST_KEY *key)$/;"	f	file:
dst_s_write_public_key	dst_api.c	/^dst_s_write_public_key(const DST_KEY *key)$/;"	f	file:
dst_sig_size	dst_api.c	/^dst_sig_size(DST_KEY *key) {$/;"	f
dst_sign_data	dst_api.c	/^dst_sign_data(const int mode, DST_KEY *in_key, void **context, $/;"	f
dst_t_func	dst_api.c	/^dst_func *dst_t_func[DST_MAX_ALGS];$/;"	v
dst_verify_data	dst_api.c	/^dst_verify_data(const int mode, DST_KEY *in_key, void **context, $/;"	f
dst_work	prandom.c	/^} dst_work;$/;"	t	typeref:struct:work	file:
dst_write_key	dst_api.c	/^dst_write_key(const DST_KEY *key, const int type)$/;"	f
file_digest	prandom.c	/^	DST_KEY *file_digest;$/;"	m	struct:work	file:
files	prandom.c	/^static const char *files[] = {$/;"	v	file:
filled	prandom.c	/^	unsigned needed, filled, bytes;$/;"	m	struct:work	file:
force_hash	prandom.c	/^force_hash(dst_work *work, prand_hash *hash)$/;"	f	file:
get_dev_random	prandom.c	/^get_dev_random(u_char *output, unsigned size)$/;"	f	file:
get_hmac_key	prandom.c	/^get_hmac_key(int step, int block)$/;"	f	file:
hash	prandom.c	/^	prand_hash *hash[DST_NUM_HASHES];$/;"	m	struct:work	file:
hash	prandom.c	/^typedef struct hash {$/;"	s	file:
hk_ipad	hmac_link.c	/^	u_char hk_ipad[64], hk_opad[64];$/;"	m	struct:hmackey	file:
hk_opad	hmac_link.c	/^	u_char hk_ipad[64], hk_opad[64];$/;"	m	struct:hmackey	file:
hmackey	hmac_link.c	/^typedef struct hmackey {$/;"	s	file:
key	prandom.c	/^	DST_KEY *key;$/;"	m	struct:hash	file:
key_file_fmt_str	dst_api.c	/^const char *key_file_fmt_str = "Private-key-format: v%s\\nAlgorithm: %d (%s)\\n";$/;"	v
md5_block	md5_dgst.c	/^static void md5_block(c, X)$/;"	f	file:
mtime	prandom.c	/^struct timeval *mtime;$/;"	v	typeref:struct:timeval
my_digest	prandom.c	/^my_digest(dst_work *work, const u_char *input, unsigned size)$/;"	f	file:
needed	prandom.c	/^	unsigned needed, filled, bytes;$/;"	m	struct:work	file:
output	prandom.c	/^	u_char *output;$/;"	m	struct:work	file:
own_random	prandom.c	/^own_random(dst_work *work)$/;"	f	file:
prand_hash	prandom.c	/^} prand_hash;$/;"	t	typeref:struct:hash	file:
printit	md5_dgst.c	/^int printit(l)$/;"	f
ran_cnt	prandom.c	/^static u_int32_t ran_cnt = (DST_RANDOM_PATTERN >> 10);$/;"	v	file:
ran_val	prandom.c	/^static u_int32_t ran_val = DST_RANDOM_PATTERN;$/;"	v	file:
rcsid	base64.c	/^static const char rcsid[] = "$Id: base64.c,v 1.5.6.1 2009-11-20 01:49:01 sar Exp $";$/;"	v	file:
rcsid	dst_api.c	/^static const char rcsid[] = "$Header: \/proj\/cvs\/prod\/DHCP\/dst\/dst_api.c,v 1.9 2009-10-29 00:46:48 sar Exp $";$/;"	v	file:
rcsid	dst_support.c	/^static const char rcsid[] = "$Header: \/proj\/cvs\/prod\/DHCP\/dst\/dst_support.c,v 1.6.6.1 2009-11-20 01:49:01 sar Exp $";$/;"	v	file:
rcsid	hmac_link.c	/^static const char rcsid[] = "$Header: \/proj\/cvs\/prod\/DHCP\/dst\/hmac_link.c,v 1.5.6.1 2009-11-20 01:49:01 sar Exp $";$/;"	v	file:
rcsid	prandom.c	/^static const char rcsid[] = "$Header: \/proj\/cvs\/prod\/DHCP\/dst\/prandom.c,v 1.8.6.1 2009-11-20 01:49:01 sar Exp $";$/;"	v	file:
step	prandom.c	/^	int digested, block, step, curr;$/;"	m	struct:hash	file:
unix_cmd	prandom.c	/^unix_cmd(dst_work *work)$/;"	f	file:
work	prandom.c	/^typedef struct work {$/;"	s	file:
