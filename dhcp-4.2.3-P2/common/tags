!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABS	dlpi.c	124;"	d	file:
BSD_COMP	discover.c	37;"	d	file:
CMSG_LEN	socket.c	/^static size_t CMSG_LEN(size_t len) {$/;"	f	file:
CMSG_SPACE	socket.c	/^static size_t CMSG_SPACE(size_t len) {$/;"	f	file:
DHCP_OPTION_DATA	options.c	35;"	d	file:
DHCP_SEC_MAX	dispatch.c	177;"	d	file:
DLPI_DEVDIR	dlpi.c	133;"	d	file:
DLPI_MAXDLADDR	dlpi.c	132;"	d	file:
DLPI_MAXDLBUF	dlpi.c	131;"	d	file:
DLPI_MAXWAIT	dlpi.c	740;"	d	file:
DLPI_MODNAME	dlpi.c	111;"	d	file:
DLPI_MODNAME	dlpi.c	113;"	d	file:
DLPI_MODNAME	dlpi.c	117;"	d	file:
DLPI_MODNAME	dlpi.c	119;"	d	file:
DQLEN	print.c	474;"	d	file:
DS_SPRINTF_SIZE	tree.c	49;"	d	file:
ETHER_H_PREFIX	dlpi.c	428;"	d	file:
HBLEN	print.c	438;"	d	file:
IF_NAMESIZE	discover.c	186;"	d	file:
IF_NAMESIZE	discover.c	188;"	d	file:
IF_NAMESIZE	discover.c	190;"	d	file:
ISC_HAVE_LIFC_FAMILY	discover.c	167;"	d	file:
ISC_HAVE_LIFC_FLAGS	discover.c	168;"	d	file:
LIFCONF	discover.c	165;"	d	file:
LIFCONF	discover.c	169;"	d	file:
LIFCONF	discover.c	197;"	d	file:
LIFREQ	discover.c	179;"	d	file:
LIFREQ	discover.c	181;"	d	file:
LIFREQ	discover.c	196;"	d	file:
MRns_name_compress	ns_name.c	/^MRns_name_compress(const char *src, u_char *dst, size_t dstsiz,$/;"	f
MRns_name_ntol	ns_name.c	/^MRns_name_ntol(const u_char *src, u_char *dst, size_t dstsiz) {$/;"	f
MRns_name_ntop	ns_name.c	/^MRns_name_ntop(const u_char *src, char *dst, size_t dstsiz) {$/;"	f
MRns_name_pack	ns_name.c	/^MRns_name_pack(const u_char *src, u_char *dst, unsigned dstsiz,$/;"	f
MRns_name_pton	ns_name.c	/^MRns_name_pton(const char *src, u_char *dst, size_t dstsiz) {$/;"	f
MRns_name_skip	ns_name.c	/^MRns_name_skip(const u_char **ptrptr, const u_char *eom) {$/;"	f
MRns_name_uncompress	ns_name.c	/^MRns_name_uncompress(const u_char *msg, const u_char *eom, const u_char *src,$/;"	f
MRns_name_unpack	ns_name.c	/^MRns_name_unpack(const u_char *msg, const u_char *eom, const u_char *src,$/;"	f
PRIORITY_COUNT	options.c	530;"	d	file:
SIOCGLIFCONF	discover.c	194;"	d	file:
SIOCGLIFFLAGS	discover.c	195;"	d	file:
TRACE_PTR_LEN	dns.c	198;"	d	file:
T_DHCID	dns.c	821;"	d	file:
USEC_MAX	dispatch.c	176;"	d	file:
access_time	tr.c	/^        unsigned long access_time;	\/* time we last used this entry *\/$/;"	m	struct:routing_entry	file:
add_enumeration	parse.c	/^void add_enumeration (struct enumeration *enumeration)$/;"	f
add_ipv4_addr_to_interface	discover.c	/^add_ipv4_addr_to_interface(struct interface_info *iface, $/;"	f
add_ipv6_addr_to_interface	discover.c	/^add_ipv6_addr_to_interface(struct interface_info *iface, $/;"	f
add_option	options.c	/^add_option(struct option_state *options,$/;"	f
add_timeout	dispatch.c	/^void add_timeout (when, where, what, ref, unref)$/;"	f
addr	discover.c	/^	struct sockaddr_storage addr;	\/* address information *\/$/;"	m	struct:iface_info	typeref:struct:iface_info::sockaddr_storage	file:
addr	tr.c	/^        unsigned char addr[TR_ALEN];$/;"	m	struct:routing_entry	file:
addr_and	inet.c	/^addr_and(struct iaddr *result, const struct iaddr *a1, const struct iaddr *a2) {$/;"	f
addr_cmp	inet.c	/^addr_cmp(const struct iaddr *a1, const struct iaddr *a2) {$/;"	f
addr_eq	inet.c	/^int addr_eq (addr1, addr2)$/;"	f
addr_match	inet.c	/^addr_match(addr, match)$/;"	f
addr_or	inet.c	/^addr_or(struct iaddr *result, const struct iaddr *a1, const struct iaddr *a2) {$/;"	f
allocate_cmsg_cbuf	socket.c	/^allocate_cmsg_cbuf(void) {$/;"	f	file:
also_save_option	options.c	/^also_save_option(struct universe *universe, struct option_state *options,$/;"	f
append_option	options.c	/^append_option(struct data_string *dst, struct universe *universe,$/;"	f
append_option_buffer	options.c	/^append_option_buffer(struct universe *universe, struct option_state *options,$/;"	f
assemble_ethernet_header	ethernet.c	/^void assemble_ethernet_header (interface, buf, bufix, to)$/;"	f
assemble_fddi_header	fddi.c	/^void assemble_fddi_header (interface, buf, bufix, to)$/;"	f
assemble_hw_header	packet.c	/^void assemble_hw_header (interface, buf, bufix, to)$/;"	f
assemble_tr_header	tr.c	/^void assemble_tr_header (interface, buf, bufix, to)$/;"	f
assemble_udp_ip_header	packet.c	/^void assemble_udp_ip_header (interface, buf, bufix,$/;"	f
begin_iface_scan	discover.c	/^begin_iface_scan(struct iface_conf_list *ifaces) {$/;"	f
bind_ds_value	tree.c	/^int bind_ds_value (struct binding_scope **scope,$/;"	f
binding_scope_allocate	alloc.c	/^int binding_scope_allocate (ptr, file, line)$/;"	f
binding_scope_dereference	tree.c	/^int binding_scope_dereference (ptr, file, line)$/;"	f
binding_scope_reference	alloc.c	/^int binding_scope_reference (ptr, bp, file, line)$/;"	f
binding_value_allocate	alloc.c	/^int binding_value_allocate (cptr, file, line)$/;"	f
binding_value_dereference	tree.c	/^int binding_value_dereference (struct binding_value **v,$/;"	f
binding_value_reference	alloc.c	/^int binding_value_reference (ptr, src, file, line)$/;"	f
bootp_packet_handler	discover.c	/^void (*bootp_packet_handler) (struct interface_info *,$/;"	v
bpf_fddi_filter	bpf.c	/^struct bpf_insn *bpf_fddi_filter;$/;"	v	typeref:struct:bpf_insn
bpf_insn	bpf.c	41;"	d	file:
broadcast_addr	inet.c	/^struct iaddr broadcast_addr (subnet, mask)$/;"	f
buf	options.c	/^	char *buf;$/;"	m	struct:vsio_state	file:
buffer_allocate	alloc.c	/^int buffer_allocate (ptr, len, file, line)$/;"	f
buffer_dereference	alloc.c	/^int buffer_dereference (ptr, file, line)$/;"	f
buffer_reference	alloc.c	/^int buffer_reference (ptr, bp, file, line)$/;"	f
buflen	options.c	/^	int buflen;$/;"	m	struct:vsio_state	file:
bufpos	options.c	/^	int bufpos;$/;"	m	struct:vsio_state	file:
build_server_oro	options.c	/^build_server_oro(struct data_string *server_oro, $/;"	f
can_receive_unicast_unconfigured	bpf.c	/^int can_receive_unicast_unconfigured (ip)$/;"	f
can_receive_unicast_unconfigured	dlpi.c	/^int can_receive_unicast_unconfigured (ip)$/;"	f
can_receive_unicast_unconfigured	lpf.c	/^int can_receive_unicast_unconfigured (ip)$/;"	f
can_receive_unicast_unconfigured	nit.c	/^int can_receive_unicast_unconfigured (ip)$/;"	f
can_receive_unicast_unconfigured	socket.c	/^int can_receive_unicast_unconfigured (ip)$/;"	f
can_receive_unicast_unconfigured	upf.c	/^int can_receive_unicast_unconfigured (ip)$/;"	f
can_unicast_without_arp	bpf.c	/^int can_unicast_without_arp (ip)$/;"	f
can_unicast_without_arp	dlpi.c	/^int can_unicast_without_arp (ip)$/;"	f
can_unicast_without_arp	lpf.c	/^int can_unicast_without_arp (ip)$/;"	f
can_unicast_without_arp	nit.c	/^int can_unicast_without_arp (ip)$/;"	f
can_unicast_without_arp	socket.c	/^int can_unicast_without_arp (ip)$/;"	f
can_unicast_without_arp	upf.c	/^int can_unicast_without_arp (ip)$/;"	f
cancel_all_timeouts	dispatch.c	/^void cancel_all_timeouts ()$/;"	f
cancel_timeout	dispatch.c	/^void cancel_timeout (where, what)$/;"	f
checksum	packet.c	/^u_int32_t checksum (buf, nbytes, sum)$/;"	f
clone_group	memory.c	/^int clone_group (struct group **gp, struct group *group,$/;"	f
collect_oro	options.c	/^collect_oro(struct option_cache *oc,$/;"	f	file:
conf	discover.c	/^	struct LIFCONF conf;	\/* structure used to get information *\/$/;"	m	struct:iface_conf_list	typeref:struct:iface_conf_list::LIFCONF	file:
config_universe	tables.c	/^struct universe *config_universe;$/;"	v	typeref:struct:universe
cons	tree.c	/^pair cons (car, cdr)$/;"	f
cons_options	options.c	/^cons_options(struct packet *inpacket, struct dhcp_packet *outpacket,$/;"	f
control_buf	socket.c	/^static void   *control_buf = NULL;$/;"	v	file:
control_buf_len	socket.c	/^static size_t  control_buf_len = 0;$/;"	v	file:
convert_num	parse.c	/^void convert_num (cfile, buf, str, base, size)$/;"	f
count_options	options.c	/^count_options(struct option_cache *dummy_oc,$/;"	f	file:
create_binding	tree.c	/^struct binding *create_binding (struct binding_scope **scope, const char *name)$/;"	f
data_string_copy	alloc.c	/^data_string_copy(struct data_string *dest, const struct data_string *src,$/;"	f
data_string_forget	alloc.c	/^void data_string_forget (data, file, line)$/;"	f
data_string_sprintfa	tree.c	/^data_string_sprintfa(struct data_string *ds, const char *fmt, ...) {$/;"	f
data_string_truncate	alloc.c	/^void data_string_truncate (dp, len)$/;"	f
data_subexpression_length	tree.c	/^int data_subexpression_length (int *rv,$/;"	f
db_time_format	print.c	/^int db_time_format = DEFAULT_TIME_FORMAT;$/;"	v
ddns_cancel	dns.c	/^ddns_cancel(dhcp_ddns_cb_t *ddns_cb) {$/;"	f
ddns_cb_alloc	dns.c	/^ddns_cb_alloc(const char *file, int line)$/;"	f
ddns_cb_forget_zone	dns.c	/^ddns_cb_forget_zone(dhcp_ddns_cb_t *ddns_cb)$/;"	f
ddns_cb_free	dns.c	/^ddns_cb_free(dhcp_ddns_cb_t *ddns_cb, const char *file, int line)$/;"	f
ddns_interlude	dns.c	/^void ddns_interlude(isc_task_t  *taskp,$/;"	f
ddns_map	dns.c	/^static dhcp_ddns_map_t *ddns_map;$/;"	v	file:
ddns_modify_fwd	dns.c	/^ddns_modify_fwd(dhcp_ddns_cb_t *ddns_cb)$/;"	f
ddns_modify_fwd_add1	dns.c	/^ddns_modify_fwd_add1(dhcp_ddns_cb_t   *ddns_cb,$/;"	f	file:
ddns_modify_fwd_add2	dns.c	/^ddns_modify_fwd_add2(dhcp_ddns_cb_t   *ddns_cb,$/;"	f	file:
ddns_modify_fwd_rem1	dns.c	/^ddns_modify_fwd_rem1(dhcp_ddns_cb_t   *ddns_cb,$/;"	f	file:
ddns_modify_fwd_rem2	dns.c	/^ddns_modify_fwd_rem2(dhcp_ddns_cb_t   *ddns_cb,$/;"	f	file:
ddns_modify_ptr	dns.c	/^ddns_modify_ptr(dhcp_ddns_cb_t *ddns_cb)$/;"	f
ddns_update	dns.c	433;"	d	file:
ddns_update	dns.c	435;"	d	file:
decode_ethernet_header	ethernet.c	/^ssize_t decode_ethernet_header (interface, buf, bufix, from)$/;"	f
decode_fddi_header	fddi.c	/^ssize_t decode_fddi_header (interface, buf, bufix, from)$/;"	f
decode_hw_header	packet.c	/^ssize_t decode_hw_header (interface, buf, bufix, from)$/;"	f
decode_tr_header	tr.c	/^ssize_t decode_tr_header (interface, buf, bufix, from)$/;"	f
decode_udp_ip_header	packet.c	/^decode_udp_ip_header(struct interface_info *interface,$/;"	f
default_option_format	tables.c	/^char *default_option_format = (char *) "X";$/;"	v
delete_fqdn6_option	options.c	/^delete_fqdn6_option(struct universe *universe, struct option_state *options,$/;"	f
delete_group	memory.c	/^isc_result_t delete_group (struct group_object *group, int writep)$/;"	f
delete_hashed_option	options.c	/^void delete_hashed_option (universe, options, code)$/;"	f
delete_linked_option	options.c	/^void delete_linked_option (universe, options, code)$/;"	f
delete_option	options.c	/^void delete_option (universe, options, code)$/;"	f
dhcid_fromlease	dns.c	/^dhcid_fromlease(struct data_string *dhcid,$/;"	f
dhcid_tolease	dns.c	/^dhcid_tolease(struct data_string *dhcid,$/;"	f
dhcp_bpf_filter	bpf.c	/^struct bpf_insn dhcp_bpf_filter [] = {$/;"	v	typeref:struct:bpf_insn
dhcp_bpf_filter_len	bpf.c	/^int dhcp_bpf_filter_len = sizeof dhcp_bpf_filter \/ sizeof (struct bpf_insn);$/;"	v
dhcp_bpf_tr_filter	bpf.c	/^struct bpf_insn dhcp_bpf_tr_filter [] = {$/;"	v	typeref:struct:bpf_insn
dhcp_bpf_tr_filter_len	bpf.c	/^int dhcp_bpf_tr_filter_len = (sizeof dhcp_bpf_tr_filter \/$/;"	v
dhcp_common_objects_setup	comapi.c	/^void dhcp_common_objects_setup ()$/;"	f
dhcp_control_create	comapi.c	/^isc_result_t dhcp_control_create (omapi_object_t **lp,$/;"	f
dhcp_control_destroy	comapi.c	/^isc_result_t dhcp_control_destroy (omapi_object_t *h,$/;"	f
dhcp_control_get_value	comapi.c	/^isc_result_t dhcp_control_get_value (omapi_object_t *h, omapi_object_t *id,$/;"	f
dhcp_control_lookup	comapi.c	/^isc_result_t dhcp_control_lookup (omapi_object_t **lp,$/;"	f
dhcp_control_object	comapi.c	/^dhcp_control_object_t *dhcp_control_object;$/;"	v
dhcp_control_remove	comapi.c	/^isc_result_t dhcp_control_remove (omapi_object_t *lp,$/;"	f
dhcp_control_set_value	comapi.c	/^isc_result_t dhcp_control_set_value  (omapi_object_t *h,$/;"	f
dhcp_control_signal_handler	comapi.c	/^isc_result_t dhcp_control_signal_handler (omapi_object_t *h,$/;"	f
dhcp_control_stuff_values	comapi.c	/^isc_result_t dhcp_control_stuff_values (omapi_object_t *c,$/;"	f
dhcp_ddns_data_t	dns.c	/^} dhcp_ddns_data_t;$/;"	t	typeref:struct:dhcp_ddns_rdata	file:
dhcp_ddns_map	dns.c	/^typedef struct dhcp_ddns_map {$/;"	s	file:
dhcp_ddns_map_t	dns.c	/^} dhcp_ddns_map_t;$/;"	t	typeref:struct:dhcp_ddns_map	file:
dhcp_ddns_rdata	dns.c	/^typedef struct dhcp_ddns_rdata {$/;"	s	file:
dhcp_free_list	alloc.c	/^struct dhcp_packet *dhcp_free_list;$/;"	v	typeref:struct:dhcp_packet
dhcp_group_create	comapi.c	/^isc_result_t dhcp_group_create (omapi_object_t **lp,$/;"	f
dhcp_group_destroy	comapi.c	/^isc_result_t dhcp_group_destroy (omapi_object_t *h, const char *file, int line)$/;"	f
dhcp_group_get_value	comapi.c	/^isc_result_t dhcp_group_get_value (omapi_object_t *h, omapi_object_t *id,$/;"	f
dhcp_group_lookup	comapi.c	/^isc_result_t dhcp_group_lookup (omapi_object_t **lp,$/;"	f
dhcp_group_remove	comapi.c	/^isc_result_t dhcp_group_remove (omapi_object_t *lp,$/;"	f
dhcp_group_set_value	comapi.c	/^isc_result_t dhcp_group_set_value  (omapi_object_t *h,$/;"	f
dhcp_group_signal_handler	comapi.c	/^isc_result_t dhcp_group_signal_handler (omapi_object_t *h,$/;"	f
dhcp_group_stuff_values	comapi.c	/^isc_result_t dhcp_group_stuff_values (omapi_object_t *c,$/;"	f
dhcp_interface_create	discover.c	/^isc_result_t dhcp_interface_create (omapi_object_t **lp,$/;"	f
dhcp_interface_destroy	discover.c	/^isc_result_t dhcp_interface_destroy (omapi_object_t *h,$/;"	f
dhcp_interface_discovery_hook	discover.c	/^int (*dhcp_interface_discovery_hook) (struct interface_info *);$/;"	v
dhcp_interface_get_value	discover.c	/^isc_result_t dhcp_interface_get_value (omapi_object_t *h,$/;"	f
dhcp_interface_lookup	discover.c	/^isc_result_t dhcp_interface_lookup (omapi_object_t **ip,$/;"	f
dhcp_interface_remove	discover.c	/^isc_result_t dhcp_interface_remove (omapi_object_t *lp,$/;"	f
dhcp_interface_set_value	discover.c	/^isc_result_t dhcp_interface_set_value  (omapi_object_t *h,$/;"	f
dhcp_interface_setup_hook	discover.c	/^int (*dhcp_interface_setup_hook) (struct interface_info *, struct iaddr *);$/;"	v
dhcp_interface_shutdown_hook	discover.c	/^int (*dhcp_interface_shutdown_hook) (struct interface_info *);$/;"	v
dhcp_interface_signal_handler	discover.c	/^isc_result_t dhcp_interface_signal_handler (omapi_object_t *h,$/;"	f
dhcp_interface_startup_hook	discover.c	/^isc_result_t (*dhcp_interface_startup_hook) (struct interface_info *);$/;"	v
dhcp_interface_stuff_values	discover.c	/^isc_result_t dhcp_interface_stuff_values (omapi_object_t *c,$/;"	f
dhcp_options	tables.c	/^static struct option dhcp_options[] = {$/;"	v	typeref:struct:option	file:
dhcp_shared_network_create	comapi.c	/^isc_result_t dhcp_shared_network_create (omapi_object_t **lp,$/;"	f
dhcp_shared_network_destroy	comapi.c	/^isc_result_t dhcp_shared_network_destroy (omapi_object_t *h,$/;"	f
dhcp_shared_network_get_value	comapi.c	/^isc_result_t dhcp_shared_network_get_value (omapi_object_t *h,$/;"	f
dhcp_shared_network_lookup	comapi.c	/^isc_result_t dhcp_shared_network_lookup (omapi_object_t **lp,$/;"	f
dhcp_shared_network_remove	comapi.c	/^isc_result_t dhcp_shared_network_remove (omapi_object_t *lp,$/;"	f
dhcp_shared_network_set_value	comapi.c	/^isc_result_t dhcp_shared_network_set_value  (omapi_object_t *h,$/;"	f
dhcp_shared_network_signal_handler	comapi.c	/^isc_result_t dhcp_shared_network_signal_handler (omapi_object_t *h,$/;"	f
dhcp_shared_network_stuff_values	comapi.c	/^isc_result_t dhcp_shared_network_stuff_values (omapi_object_t *c,$/;"	f
dhcp_subnet_create	comapi.c	/^isc_result_t dhcp_subnet_create (omapi_object_t **lp,$/;"	f
dhcp_subnet_destroy	comapi.c	/^isc_result_t dhcp_subnet_destroy (omapi_object_t *h, const char *file, int line)$/;"	f
dhcp_subnet_get_value	comapi.c	/^isc_result_t dhcp_subnet_get_value (omapi_object_t *h, omapi_object_t *id,$/;"	f
dhcp_subnet_lookup	comapi.c	/^isc_result_t dhcp_subnet_lookup (omapi_object_t **lp,$/;"	f
dhcp_subnet_remove	comapi.c	/^isc_result_t dhcp_subnet_remove (omapi_object_t *lp,$/;"	f
dhcp_subnet_set_value	comapi.c	/^isc_result_t dhcp_subnet_set_value  (omapi_object_t *h,$/;"	f
dhcp_subnet_signal_handler	comapi.c	/^isc_result_t dhcp_subnet_signal_handler (omapi_object_t *h,$/;"	f
dhcp_subnet_stuff_values	comapi.c	/^isc_result_t dhcp_subnet_stuff_values (omapi_object_t *c,$/;"	f
dhcp_type_control	comapi.c	/^omapi_object_type_t *dhcp_type_control;$/;"	v
dhcp_type_icmp	icmp.c	/^static omapi_object_type_t *dhcp_type_icmp;$/;"	v	file:
dhcp_type_interface	discover.c	/^omapi_object_type_t *dhcp_type_interface;$/;"	v
dhcp_type_subnet	comapi.c	/^omapi_object_type_t *dhcp_type_subnet;$/;"	v
dhcp_universe	tables.c	/^struct universe dhcp_universe;$/;"	v	typeref:struct:universe
dhcpv6_duid_type_values	tables.c	/^struct enumeration_value dhcpv6_duid_type_values[] = {$/;"	v	typeref:struct:enumeration_value
dhcpv6_duid_types	tables.c	/^struct enumeration dhcpv6_duid_types = {$/;"	v	typeref:struct:enumeration
dhcpv6_message_values	tables.c	/^struct enumeration_value dhcpv6_message_values[] = {$/;"	v	typeref:struct:enumeration_value
dhcpv6_messages	tables.c	/^struct enumeration dhcpv6_messages = {$/;"	v	typeref:struct:enumeration
dhcpv6_options	tables.c	/^static struct option dhcpv6_options[] = {$/;"	v	typeref:struct:option	file:
dhcpv6_packet_handler	discover.c	/^void (*dhcpv6_packet_handler)(struct interface_info *,$/;"	v
dhcpv6_status_code_values	tables.c	/^struct enumeration_value dhcpv6_status_code_values[] = {$/;"	v	typeref:struct:enumeration_value
dhcpv6_status_codes	tables.c	/^struct enumeration dhcpv6_status_codes = {$/;"	v	typeref:struct:enumeration
dhcpv6_type_name_max	tables.c	/^const int dhcpv6_type_name_max =$/;"	v
dhcpv6_type_names	tables.c	/^const char *dhcpv6_type_names[] = {$/;"	v
dhcpv6_universe	tables.c	/^struct universe dhcpv6_universe;$/;"	v	typeref:struct:universe
digits	ns_name.c	/^static const char	digits[] = "0123456789";$/;"	v	file:
discover_interfaces	discover.c	/^discover_interfaces(int state) {$/;"	f
dispatch	dispatch.c	/^dispatch(void)$/;"	f
dlpiattachreq	dlpi.c	/^static int dlpiattachreq (fd, ppa)$/;"	f	file:
dlpibindack	dlpi.c	/^static int dlpibindack (fd, bufp)$/;"	f	file:
dlpibindreq	dlpi.c	/^static int dlpibindreq (fd, sap, max_conind, service_mode, conn_mgmt, xidtest)$/;"	f	file:
dlpidetachreq	dlpi.c	/^static int dlpidetachreq (fd)$/;"	f	file:
dlpiinfoack	dlpi.c	/^static int dlpiinfoack (fd, bufp)$/;"	f	file:
dlpiinforeq	dlpi.c	/^static int dlpiinforeq (fd)$/;"	f	file:
dlpiokack	dlpi.c	/^static int dlpiokack (fd, bufp)$/;"	f	file:
dlpiopen	dlpi.c	/^dlpiopen(const char *ifname) {$/;"	f	file:
dlpiphysaddrack	dlpi.c	/^int dlpiphysaddrack (fd, bufp)$/;"	f
dlpiphysaddrreq	dlpi.c	/^static int dlpiphysaddrreq (fd, addrtype)$/;"	f	file:
dlpiunbindreq	dlpi.c	/^static int dlpiunbindreq (fd)$/;"	f	file:
dlpiunit	dlpi.c	/^static int dlpiunit (ifname)$/;"	f	file:
dlpiunitdataind	dlpi.c	/^static int dlpiunitdataind (fd, daddr, daddrlen,$/;"	f	file:
dlpiunitdatareq	dlpi.c	/^int dlpiunitdatareq (fd, addr, addrlen, minpri, maxpri, dbuf, dbuflen)$/;"	f
dn_find	ns_name.c	/^dn_find(const u_char *domain, const u_char *msg,$/;"	f	file:
dns_host_entry_allocate	alloc.c	/^int dns_host_entry_allocate (ptr, hostname, file, line)$/;"	f
dns_host_entry_dereference	alloc.c	/^int dns_host_entry_dereference (ptr, file, line)$/;"	f
dns_host_entry_reference	alloc.c	/^int dns_host_entry_reference (ptr, bp, file, line)$/;"	f
dns_zone_allocate	alloc.c	/^int dns_zone_allocate (ptr, file, line)$/;"	f
dns_zone_dereference	dns.c	/^int dns_zone_dereference (ptr, file, line)$/;"	f
dns_zone_hash	dns.c	/^dns_zone_hash_t *dns_zone_hash;$/;"	v
dns_zone_lookup	dns.c	/^isc_result_t dns_zone_lookup (struct dns_zone **zone, const char *name)$/;"	f
dns_zone_reference	alloc.c	/^int dns_zone_reference (ptr, bp, file, line)$/;"	f
do_host_lookup	tree.c	/^static int do_host_lookup (result, dns)$/;"	f	file:
do_packet	options.c	/^void do_packet (interface, packet, len, from_port, from, hfrom)$/;"	f
do_packet6	options.c	/^do_packet6(struct interface_info *interface, const char *packet, $/;"	f
do_peek_token	conflex.c	/^do_peek_token(const char **rval, unsigned int *rlen,$/;"	f
domains	resolv.c	/^struct domain_search_list *domains;$/;"	v	typeref:struct:domain_search_list
dummy_interfaces	discover.c	/^struct interface_info *interfaces, *dummy_interfaces, *fallback_interface;$/;"	v	typeref:struct:
dump_packet	print.c	/^void dump_packet (tp)$/;"	f
dump_packet_option	print.c	/^void dump_packet_option (struct option_cache *oc,$/;"	f
dump_raw	print.c	/^void dump_raw (buf, len)$/;"	f
end_iface_scan	discover.c	/^end_iface_scan(struct iface_conf_list *ifaces) {$/;"	f
end_parse	conflex.c	/^isc_result_t end_parse (cfile)$/;"	f
enter_dns_host	tree.c	/^int enter_dns_host (dh, name)$/;"	f
enter_dns_zone	dns.c	/^isc_result_t enter_dns_zone (struct dns_zone *zone)$/;"	f
enumerations	parse.c	/^struct enumeration *enumerations;$/;"	v	typeref:struct:enumeration
evaluate_boolean_expression	tree.c	/^int evaluate_boolean_expression (result, packet, lease, client_state,$/;"	f
evaluate_boolean_expression_result	tree.c	/^int evaluate_boolean_expression_result (ignorep, packet, lease, client_state,$/;"	f
evaluate_boolean_option_cache	tree.c	/^int evaluate_boolean_option_cache (ignorep, packet,$/;"	f
evaluate_data_expression	tree.c	/^int evaluate_data_expression (result, packet, lease, client_state,$/;"	f
evaluate_dns_expression	tree.c	/^int evaluate_dns_expression (result, packet, lease, client_state, in_options,$/;"	f
evaluate_expression	tree.c	/^int evaluate_expression (result, packet, lease, client_state,$/;"	f
evaluate_numeric_expression	tree.c	/^int evaluate_numeric_expression (result, packet, lease, client_state,$/;"	f
evaluate_option_cache	tree.c	/^int evaluate_option_cache (result, packet, lease, client_state,$/;"	f
executable_statement_allocate	alloc.c	/^int executable_statement_allocate (ptr, file, line)$/;"	f
executable_statement_dereference	execute.c	/^int executable_statement_dereference (ptr, file, line)$/;"	f
executable_statement_foreach	execute.c	/^int executable_statement_foreach (struct executable_statement *stmt,$/;"	f
executable_statement_reference	alloc.c	/^int executable_statement_reference (ptr, bp, file, line)$/;"	f
execute_statements	execute.c	/^int execute_statements (result, packet, lease, client_state,$/;"	f
execute_statements_in_scope	execute.c	/^void execute_statements_in_scope (result, packet,$/;"	f
expected	dlpi.c	/^static int expected (prim, dlp, msgflags)$/;"	f	file:
expire_routes	tr.c	/^static void expire_routes()$/;"	f	file:
expr_valid_for_context	tree.c	/^int expr_valid_for_context (struct expression *expr,$/;"	f
expression_allocate	alloc.c	/^int expression_allocate (cptr, file, line)$/;"	f
expression_context	tree.c	/^enum expression_context expression_context (struct expression *expr)$/;"	f
expression_dereference	tree.c	/^void expression_dereference (eptr, file, line)$/;"	f
expression_reference	alloc.c	/^int expression_reference (ptr, src, file, line)$/;"	f
fallback_discard	socket.c	/^isc_result_t fallback_discard (object)$/;"	f
fallback_interface	discover.c	/^struct interface_info *interfaces, *dummy_interfaces, *fallback_interface;$/;"	v	typeref:struct:
find_binding	tree.c	/^struct binding *find_binding (struct binding_scope *scope, const char *name)$/;"	f
find_bound_string	tree.c	/^int find_bound_string (struct data_string *value,$/;"	f
find_cached_zone	dns.c	/^find_cached_zone(dhcp_ddns_cb_t *ddns_cb, int direction) $/;"	f
find_enumeration	parse.c	/^struct enumeration *find_enumeration (const char *name, int length)$/;"	f
find_enumeration_value	parse.c	/^struct enumeration_value *find_enumeration_value (const char *name,$/;"	f
find_matching_case	execute.c	/^int find_matching_case (struct executable_statement **ep,$/;"	f
find_option_universe	options.c	/^struct universe *find_option_universe (struct option *eopt, const char *uname)$/;"	f
find_tsig_key	dns.c	/^isc_result_t find_tsig_key (ns_tsig_key **key, const char *zname,$/;"	f
first_name_server	resolv.c	/^struct name_server *first_name_server ()$/;"	f
flags	discover.c	/^	isc_uint64_t flags;		\/* interface flags, e.g. IFF_LOOPBACK *\/$/;"	m	struct:iface_info	file:
forget_zone	dns.c	/^void forget_zone (struct dns_zone **zone)$/;"	f
format_has_text	options.c	/^format_has_text(format)$/;"	f
format_min_length	options.c	/^format_min_length(format, oc)$/;"	f
fp	discover.c	/^	FILE *fp;	\/* input from \/proc\/net\/dev *\/$/;"	m	struct:iface_conf_list	file:
fp6	discover.c	/^	FILE *fp6;	\/* input from \/proc\/net\/if_inet6 *\/$/;"	m	struct:iface_conf_list	file:
fqdn6_option_space_encapsulate	options.c	/^fqdn6_option_space_encapsulate(struct data_string *result,$/;"	f
fqdn6_option_space_foreach	options.c	/^fqdn6_option_space_foreach(struct packet *packet, struct lease *lease,$/;"	f
fqdn6_universe	tables.c	/^struct universe fqdn6_universe;$/;"	v	typeref:struct:universe
fqdn6_universe_decode	options.c	/^fqdn6_universe_decode(struct option_state *options,$/;"	f
fqdn_encode	options.c	/^fqdn_encode(unsigned char *dst, int dstlen, const unsigned char *src,$/;"	f	file:
fqdn_option_space_encapsulate	options.c	/^int fqdn_option_space_encapsulate (result, packet, lease, client_state,$/;"	f
fqdn_options	tables.c	/^static struct option fqdn_options[] = {$/;"	v	typeref:struct:option	file:
fqdn_universe	tables.c	/^struct universe fqdn_universe;$/;"	v	typeref:struct:universe
fqdn_universe_decode	options.c	/^int fqdn_universe_decode (struct option_state *options,$/;"	f
free_binding_value	alloc.c	/^void free_binding_value (bv, file, line)$/;"	f
free_binding_values	alloc.c	/^struct binding_value *free_binding_values;$/;"	v	typeref:struct:binding_value
free_bindings	tree.c	/^int free_bindings (struct binding_scope *scope, const char *file, int line)$/;"	f
free_client_lease	alloc.c	/^void free_client_lease (lease, file, line)$/;"	f
free_dhcp_packet	alloc.c	/^void free_dhcp_packet (ptr, file, line)$/;"	f
free_domain_search_list	alloc.c	/^void free_domain_search_list (ptr, file, line)$/;"	f
free_expression	alloc.c	/^void free_expression (expr, file, line)$/;"	f
free_expressions	alloc.c	/^struct expression *free_expressions;$/;"	v	typeref:struct:expression
free_iaddrcidrnetlist	inet.c	/^free_iaddrcidrnetlist(struct iaddrcidrnetlist **result) {$/;"	f
free_name_server	alloc.c	/^void free_name_server (ptr, file, line)$/;"	f
free_option_caches	alloc.c	/^struct option_cache *free_option_caches;$/;"	v	typeref:struct:option_cache
free_packets	alloc.c	/^static struct packet *free_packets;$/;"	v	typeref:struct:packet	file:
free_pair	alloc.c	/^void free_pair (foo, file, line)$/;"	f
free_pairs	alloc.c	/^pair free_pairs;$/;"	v
free_protocol	alloc.c	/^void free_protocol (ptr, file, line)$/;"	f
free_timeouts	dispatch.c	/^static struct timeout *free_timeouts;$/;"	v	typeref:struct:timeout	file:
free_universe	alloc.c	/^void free_universe (ptr, file, line)$/;"	f
fundef_allocate	alloc.c	/^int fundef_allocate (cptr, file, line)$/;"	f
fundef_dereference	tree.c	/^int fundef_dereference (ptr, file, line)$/;"	f
fundef_reference	alloc.c	/^int fundef_reference (ptr, src, file, line)$/;"	f
get_char	conflex.c	/^static int get_char (cfile)$/;"	f	file:
get_dhcid	dns.c	/^int get_dhcid (struct data_string *id,$/;"	f
get_hw_addr	bpf.c	/^get_hw_addr(const char *name, struct hardware *hw) {$/;"	f
get_hw_addr	dlpi.c	/^get_hw_addr(const char *name, struct hardware *hw) {$/;"	f
get_hw_addr	lpf.c	/^get_hw_addr(const char *name, struct hardware *hw) {$/;"	f
get_hw_addr	socket.c	/^get_hw_addr(const char *name, struct hardware *hw) {$/;"	f
get_next_token	conflex.c	/^get_next_token(const char **rval, unsigned *rlen, $/;"	f	file:
get_option	options.c	/^int get_option (result, universe, packet, lease, client_state,$/;"	f
get_raw_token	conflex.c	/^get_raw_token(struct parse *cfile) {$/;"	f	file:
global_scope	tree.c	/^struct binding_scope *global_scope;$/;"	v	typeref:struct:binding_scope
global_v4_socket	socket.c	/^static int global_v4_socket = -1;$/;"	v	file:
global_v4_socket_references	socket.c	/^static unsigned int global_v4_socket_references = 0;$/;"	v	file:
global_v6_socket	socket.c	/^static int global_v6_socket = -1;$/;"	v	file:
global_v6_socket_references	socket.c	/^static unsigned int global_v6_socket_references = 0;$/;"	v	file:
got_one	discover.c	/^isc_result_t got_one (h)$/;"	f
got_one_v6	discover.c	/^got_one_v6(omapi_object_t *h) {$/;"	f
group_allocate	alloc.c	/^int group_allocate (ptr, file, line)$/;"	f
group_dereference	alloc.c	/^int group_dereference (ptr, file, line)$/;"	f
group_name_hash	memory.c	/^group_hash_t *group_name_hash;$/;"	v
group_reference	alloc.c	/^int group_reference (ptr, bp, file, line)$/;"	f
group_write_hook	memory.c	/^int (*group_write_hook) (struct group_object *);$/;"	v
hardware_types	tables.c	/^const char *hardware_types [] = {$/;"	v
hash_dump	print.c	/^void hash_dump (table)$/;"	f
hashed_option_space_encapsulate	options.c	/^int hashed_option_space_encapsulate (result, packet, lease, client_state,$/;"	f
hashed_option_space_foreach	options.c	/^void hashed_option_space_foreach (struct packet *packet, struct lease *lease,$/;"	f
hashed_option_state_dereference	options.c	/^int hashed_option_state_dereference (universe, state, file, line)$/;"	f
head	discover.c	/^	struct ifaddrs *head;	\/* beginning of the list *\/$/;"	m	struct:iface_conf_list	typeref:struct:iface_conf_list::ifaddrs	file:
host_addr	inet.c	/^u_int32_t host_addr (addr, mask)$/;"	f
icmp_echoreply	icmp.c	/^isc_result_t icmp_echoreply (h)$/;"	f
icmp_echorequest	icmp.c	/^int icmp_echorequest (addr)$/;"	f
icmp_readsocket	icmp.c	/^int icmp_readsocket (h)$/;"	f
icmp_startup	icmp.c	/^void icmp_startup (routep, handler)$/;"	f
icmp_state	icmp.c	/^struct icmp_state *icmp_state;$/;"	v	typeref:struct:icmp_state
if_deregister6	socket.c	/^if_deregister6(struct interface_info *info) {$/;"	f
if_deregister_receive	bpf.c	/^void if_deregister_receive (info)$/;"	f
if_deregister_receive	dlpi.c	/^void if_deregister_receive (info)$/;"	f
if_deregister_receive	lpf.c	/^void if_deregister_receive (info)$/;"	f
if_deregister_receive	nit.c	/^void if_deregister_receive (info)$/;"	f
if_deregister_receive	socket.c	/^void if_deregister_receive (info)$/;"	f
if_deregister_receive	upf.c	/^void if_deregister_receive (info)$/;"	f
if_deregister_send	bpf.c	/^void if_deregister_send (info)$/;"	f
if_deregister_send	dlpi.c	/^void if_deregister_send (info)$/;"	f
if_deregister_send	lpf.c	/^void if_deregister_send (info)$/;"	f
if_deregister_send	nit.c	/^void if_deregister_send (info)$/;"	f
if_deregister_send	raw.c	/^void if_deregister_send (info)$/;"	f
if_deregister_send	socket.c	/^void if_deregister_send (info)$/;"	f
if_deregister_send	upf.c	/^void if_deregister_send (info)$/;"	f
if_readsocket	discover.c	/^int if_readsocket (h)$/;"	f
if_register6	socket.c	/^if_register6(struct interface_info *info, int do_multicast) {$/;"	f
if_register_bpf	bpf.c	/^int if_register_bpf (info)$/;"	f
if_register_dlpi	dlpi.c	/^int if_register_dlpi (info)$/;"	f
if_register_lpf	lpf.c	/^int if_register_lpf (info)$/;"	f
if_register_multicast	socket.c	/^if_register_multicast(struct interface_info *info) {$/;"	f	file:
if_register_nit	nit.c	/^int if_register_nit (info)$/;"	f
if_register_receive	bpf.c	/^void if_register_receive (info)$/;"	f
if_register_receive	dlpi.c	/^void if_register_receive (info)$/;"	f
if_register_receive	lpf.c	/^void if_register_receive (info)$/;"	f
if_register_receive	nit.c	/^void if_register_receive (info)$/;"	f
if_register_receive	socket.c	/^void if_register_receive (info)$/;"	f
if_register_receive	upf.c	/^void if_register_receive (info)$/;"	f
if_register_send	bpf.c	/^void if_register_send (info)$/;"	f
if_register_send	dlpi.c	/^void if_register_send (info)$/;"	f
if_register_send	lpf.c	/^void if_register_send (info)$/;"	f
if_register_send	nit.c	/^void if_register_send (info)$/;"	f
if_register_send	raw.c	/^void if_register_send (info)$/;"	f
if_register_send	socket.c	/^void if_register_send (info)$/;"	f
if_register_send	socket.c	58;"	d	file:
if_register_send	upf.c	/^void if_register_send (info)$/;"	f
if_register_socket	socket.c	/^if_register_socket(struct interface_info *info, int family,$/;"	f
if_register_upf	upf.c	/^int if_register_upf (info)$/;"	f
if_reinitialize_receive	bpf.c	/^void if_reinitialize_receive (info)$/;"	f
if_reinitialize_receive	dlpi.c	/^void if_reinitialize_receive (info)$/;"	f
if_reinitialize_receive	lpf.c	/^void if_reinitialize_receive (info)$/;"	f
if_reinitialize_receive	nit.c	/^void if_reinitialize_receive (info)$/;"	f
if_reinitialize_receive	socket.c	/^void if_reinitialize_receive (info)$/;"	f
if_reinitialize_receive	upf.c	/^void if_reinitialize_receive (info)$/;"	f
if_reinitialize_send	bpf.c	/^void if_reinitialize_send (info)$/;"	f
if_reinitialize_send	dlpi.c	/^void if_reinitialize_send (info)$/;"	f
if_reinitialize_send	lpf.c	/^void if_reinitialize_send (info)$/;"	f
if_reinitialize_send	nit.c	/^void if_reinitialize_send (info)$/;"	f
if_reinitialize_send	socket.c	/^void if_reinitialize_send (info)$/;"	f
if_reinitialize_send	socket.c	60;"	d	file:
if_reinitialize_send	upf.c	/^void if_reinitialize_send (info)$/;"	f
iface	tr.c	/^        unsigned char iface[5];$/;"	m	struct:routing_entry	file:
iface_conf_list	discover.c	/^struct iface_conf_list {$/;"	s	file:
iface_info	discover.c	/^struct iface_info {$/;"	s	file:
indent_spaces	print.c	/^void indent_spaces (FILE *file, int indent)$/;"	f
initialize_common_option_spaces	tables.c	/^void initialize_common_option_spaces()$/;"	f
inpacket_trace	discover.c	/^trace_type_t *inpacket_trace;$/;"	v
insert_source_routing	tr.c	/^static int insert_source_routing (trh, interface)$/;"	f	file:
interface_count	discover.c	/^int interface_count;$/;"	v
interface_initialize	discover.c	/^isc_result_t interface_initialize (omapi_object_t *ipo,$/;"	f
interface_max	discover.c	/^int interface_max;$/;"	v
interface_setup	discover.c	/^isc_result_t interface_setup ()$/;"	f
interface_snorf	discover.c	/^void interface_snorf (struct interface_info *tmp, int ir)$/;"	f
interface_stash	discover.c	/^void interface_stash (struct interface_info *tptr)$/;"	f
interface_trace	discover.c	/^trace_type_t *interface_trace;$/;"	v
interface_trace_setup	discover.c	/^void interface_trace_setup ()$/;"	f
interface_vector	discover.c	/^struct interface_info **interface_vector;$/;"	v	typeref:struct:interface_info
interfaces	discover.c	/^struct interface_info *interfaces, *dummy_interfaces, *fallback_interface;$/;"	v	typeref:struct:interface_info
interfaces_invalidated	discover.c	/^int interfaces_invalidated;$/;"	v
intern	conflex.c	/^intern(char *atom, enum dhcp_token dfv) {$/;"	f	file:
ip_addr	inet.c	/^struct iaddr ip_addr (subnet, mask, host_address)$/;"	f
is_boolean_expression	tree.c	/^int is_boolean_expression (expr)$/;"	f
is_cidr_mask_valid	inet.c	/^is_cidr_mask_valid(const struct iaddr *addr, int bits) {$/;"	f
is_compound_expression	tree.c	/^int is_compound_expression (expr)$/;"	f
is_data_expression	tree.c	/^int is_data_expression (expr)$/;"	f
is_dns_expression	tree.c	/^int is_dns_expression (expr)$/;"	f
is_hex_string	parse.c	/^is_hex_string(const char *s) {$/;"	f	file:
is_numeric_expression	tree.c	/^int is_numeric_expression (expr)$/;"	f
isc6_options	tables.c	/^static struct option isc6_options[] = {$/;"	v	typeref:struct:option	file:
isc6_universe	tables.c	/^struct universe isc6_universe;$/;"	v	typeref:struct:universe
isc_options	tables.c	/^static struct option isc_options [] = {$/;"	v	typeref:struct:option	file:
isc_universe	tables.c	/^struct universe isc_universe;$/;"	v	typeref:struct:universe
isclib_timer_callback	dispatch.c	/^isclib_timer_callback(isc_task_t  *taskp,$/;"	f
lifc_buf	discover.c	163;"	d	file:
lifc_buf	discover.c	202;"	d	file:
lifc_len	discover.c	162;"	d	file:
lifc_len	discover.c	201;"	d	file:
lifc_req	discover.c	164;"	d	file:
lifc_req	discover.c	203;"	d	file:
lifr_addr	discover.c	173;"	d	file:
lifr_addr	discover.c	199;"	d	file:
lifr_dstaddr	discover.c	175;"	d	file:
lifr_flags	discover.c	176;"	d	file:
lifr_flags	discover.c	200;"	d	file:
lifr_name	discover.c	174;"	d	file:
lifr_name	discover.c	198;"	d	file:
limited_broadcast	discover.c	/^struct in_addr limited_broadcast;$/;"	v	typeref:struct:in_addr
linked_option_space_encapsulate	options.c	/^int linked_option_space_encapsulate (result, packet, lease, client_state,$/;"	f
linked_option_space_foreach	options.c	/^void linked_option_space_foreach (struct packet *packet, struct lease *lease,$/;"	f
linked_option_state_dereference	options.c	/^int linked_option_state_dereference (universe, state, file, line)$/;"	f
local_address	discover.c	/^struct in_addr local_address;$/;"	v	typeref:struct:in_addr
local_address6	discover.c	/^struct in6_addr local_address6;$/;"	v	typeref:struct:in6_addr
local_family	discover.c	/^int local_family = AF_INET;$/;"	v
local_port	discover.c	/^u_int16_t local_port;$/;"	v
lookup_fqdn6_option	options.c	/^lookup_fqdn6_option(struct universe *universe, struct option_state *options,$/;"	f
lookup_hashed_option	options.c	/^struct option_cache *lookup_hashed_option (universe, options, code)$/;"	f
lookup_linked_option	options.c	/^struct option_cache *lookup_linked_option (universe, options, code)$/;"	f
lookup_option	options.c	/^struct option_cache *lookup_option (universe, options, code)$/;"	f
lpf_gen_filter_setup	lpf.c	/^static void lpf_gen_filter_setup (info)$/;"	f	file:
lpf_tr_filter_setup	lpf.c	/^static void lpf_tr_filter_setup (info)$/;"	f	file:
lq6_query_type_values	tables.c	/^struct enumeration_value lq6_query_type_values[] = {$/;"	v	typeref:struct:enumeration_value
lq6_query_types	tables.c	/^struct enumeration lq6_query_types = {$/;"	v	typeref:struct:enumeration
make_concat	tree.c	/^int make_concat (expr, left, right)$/;"	f
make_const_data	tree.c	/^int make_const_data (struct expression **expr, const unsigned char *data,$/;"	f
make_const_int	tree.c	/^int make_const_int (expr, val)$/;"	f
make_const_option_cache	tree.c	/^int make_const_option_cache (oc, buffer, data, len, option, file, line)$/;"	f
make_dns_dataset	dns.c	/^make_dns_dataset(dns_rdataclass_t  dataclass,$/;"	f	file:
make_encapsulation	tree.c	/^int make_encapsulation (expr, name)$/;"	f
make_host_lookup	tree.c	/^int make_host_lookup (expr, name)$/;"	f
make_let	tree.c	/^int make_let (result, name)$/;"	f
make_limit	tree.c	/^int make_limit (new, expr, limit)$/;"	f
make_substring	tree.c	/^int make_substring (new, expr, offset, length)$/;"	f
maybe_setup_fallback	bpf.c	/^void maybe_setup_fallback ()$/;"	f
maybe_setup_fallback	dlpi.c	/^void maybe_setup_fallback ()$/;"	f
maybe_setup_fallback	lpf.c	/^void maybe_setup_fallback ()$/;"	f
maybe_setup_fallback	nit.c	/^void maybe_setup_fallback ()$/;"	f
maybe_setup_fallback	socket.c	/^void maybe_setup_fallback ()$/;"	f
maybe_setup_fallback	upf.c	/^void maybe_setup_fallback ()$/;"	f
mklower	ns_name.c	/^mklower(int ch) {$/;"	f	file:
name	discover.c	/^	char name[IFNAMSIZ];		\/* name of the interface, e.g. "bge0" *\/$/;"	m	struct:iface_info	file:
name	discover.c	/^	char name[IFNAMSIZ];		\/* name of the interface, e.g. "eth0" *\/$/;"	m	struct:iface_info	file:
name	discover.c	/^	char name[IF_NAMESIZE+1];	\/* name of the interface, e.g. "bge0" *\/$/;"	m	struct:iface_info	file:
name_servers	resolv.c	/^struct name_server *name_servers;$/;"	v	typeref:struct:name_server
new_client_lease	alloc.c	/^struct client_lease *new_client_lease (file, line)$/;"	f
new_dhcp_packet	alloc.c	/^struct dhcp_packet *new_dhcp_packet (file, line)$/;"	f
new_domain_search_list	alloc.c	/^struct domain_search_list *new_domain_search_list (file, line)$/;"	f
new_name_server	alloc.c	/^struct name_server *new_name_server (file, line)$/;"	f
new_option	alloc.c	/^struct option *new_option (name, file, line)$/;"	f
new_pair	alloc.c	/^pair new_pair (file, line)$/;"	f
new_parse	conflex.c	/^isc_result_t new_parse (cfile, file, inbuf, buflen, name, eolp)$/;"	f
new_pointer	dns.c	/^	void *new_pointer;$/;"	m	struct:dhcp_ddns_map	file:
new_protocol	alloc.c	/^struct protocol *new_protocol (file, line)$/;"	f
new_universe	alloc.c	/^struct universe *new_universe (file, line)$/;"	f
next	discover.c	/^	int next;		\/* next interface to retrieve when iterating *\/$/;"	m	struct:iface_conf_list	file:
next	discover.c	/^	struct ifaddrs *next;	\/* current position in the list *\/$/;"	m	struct:iface_conf_list	typeref:struct:iface_conf_list::ifaddrs	file:
next	dns.c	/^	struct dhcp_ddns_map *next;$/;"	m	struct:dhcp_ddns_map	typeref:struct:dhcp_ddns_map::dhcp_ddns_map	file:
next	tr.c	/^        struct routing_entry *next;$/;"	m	struct:routing_entry	typeref:struct:routing_entry::routing_entry	file:
next_iface	discover.c	/^next_iface(struct iface_info *info, int *err, struct iface_conf_list *ifaces) {$/;"	f
next_iface4	discover.c	/^next_iface4(struct iface_info *info, int *err, struct iface_conf_list *ifaces) {$/;"	f	file:
next_iface6	discover.c	/^next_iface6(struct iface_info *info, int *err, struct iface_conf_list *ifaces) {$/;"	f	file:
next_raw_token	conflex.c	/^next_raw_token(const char **rval, unsigned *rlen, struct parse *cfile) {$/;"	f
next_token	conflex.c	/^next_token(const char **rval, unsigned *rlen, struct parse *cfile) {$/;"	f
no_icmp	icmp.c	/^static int no_icmp;$/;"	v	file:
num	discover.c	/^	int num;		\/* total number of interfaces *\/$/;"	m	struct:iface_conf_list	file:
nwip_option_space_encapsulate	options.c	/^int nwip_option_space_encapsulate (result, packet, lease, client_state,$/;"	f
nwip_options	tables.c	/^static struct option nwip_options[] = {$/;"	v	typeref:struct:option	file:
nwip_universe	tables.c	/^struct universe nwip_universe;$/;"	v	typeref:struct:universe
old_pointer	dns.c	/^	char  old_pointer[TRACE_PTR_LEN];$/;"	m	struct:dhcp_ddns_map	file:
once	socket.c	/^static int once = 0;$/;"	v	file:
op_context	tree.c	/^enum expression_context op_context (op)$/;"	f
op_precedence	tree.c	/^int op_precedence (op1, op2)$/;"	f
op_val	tree.c	/^static int op_val (op)$/;"	f	file:
option_cache	tree.c	/^int option_cache (struct option_cache **oc, struct data_string *dp,$/;"	f
option_cache_allocate	alloc.c	/^int option_cache_allocate (cptr, file, line)$/;"	f
option_cache_dereference	options.c	/^int option_cache_dereference (ptr, file, line)$/;"	f
option_cache_reference	alloc.c	/^int option_cache_reference (ptr, src, file, line)$/;"	f
option_chain_head_allocate	alloc.c	/^int option_chain_head_allocate (ptr, file, line)$/;"	f
option_chain_head_dereference	alloc.c	/^int option_chain_head_dereference (ptr, file, line)$/;"	f
option_chain_head_reference	alloc.c	/^int option_chain_head_reference (ptr, bp, file, line)$/;"	f
option_dereference	tables.c	/^option_dereference(struct option **dest, const char *file, int line)$/;"	f
option_reference	tables.c	/^option_reference(struct option **dest, struct option *src,$/;"	f
option_space_encapsulate	options.c	/^int option_space_encapsulate (result, packet, lease, client_state,$/;"	f
option_space_foreach	options.c	/^void option_space_foreach (struct packet *packet, struct lease *lease,$/;"	f
option_state_allocate	alloc.c	/^int option_state_allocate (ptr, file, line)$/;"	f
option_state_dereference	alloc.c	/^int option_state_dereference (ptr, file, line)$/;"	f
option_state_reference	alloc.c	/^int option_state_reference (ptr, bp, file, line)$/;"	f
outpacket_trace	discover.c	/^trace_type_t *outpacket_trace;$/;"	v
packet6_len_okay	options.c	/^packet6_len_okay(const char *packet, int len) {$/;"	f
packet_allocate	alloc.c	/^int packet_allocate (ptr, file, line)$/;"	f
packet_dereference	alloc.c	/^int packet_dereference (ptr, file, line)$/;"	f
packet_free_list	alloc.c	/^struct packet *packet_free_list;$/;"	v	typeref:struct:packet
packet_reference	alloc.c	/^int packet_reference (ptr, bp, file, line)$/;"	f
parse_X	parse.c	/^int parse_X (cfile, buf, max)$/;"	f
parse_base64	parse.c	/^int parse_base64 (data, cfile)$/;"	f
parse_boolean	parse.c	/^int parse_boolean (cfile)$/;"	f
parse_boolean_expression	parse.c	/^int parse_boolean_expression (expr, cfile, lose)$/;"	f
parse_case_statement	parse.c	/^int parse_case_statement (result, cfile, lose, case_context)$/;"	f
parse_cshl	parse.c	/^int parse_cshl (data, cfile)$/;"	f
parse_data_expression	parse.c	/^int parse_data_expression (expr, cfile, lose)$/;"	f
parse_date	parse.c	/^parse_date(cfile)$/;"	f
parse_date_core	parse.c	/^parse_date_core(cfile)$/;"	f
parse_dns_expression	parse.c	/^int parse_dns_expression (expr, cfile, lose)$/;"	f
parse_domain_list	parse.c	/^parse_domain_list(struct parse *cfile, int compress)$/;"	f
parse_encapsulated_suboptions	options.c	/^int parse_encapsulated_suboptions (struct option_state *options,$/;"	f
parse_executable_statement	parse.c	/^int parse_executable_statement (result, cfile, lose, case_context)$/;"	f
parse_executable_statements	parse.c	/^int parse_executable_statements (statements, cfile, lose, case_context)$/;"	f
parse_expression	parse.c	/^int parse_expression (expr, cfile, lose, context, plhs, binop)$/;"	f
parse_hardware_param	parse.c	/^void parse_hardware_param (cfile, hardware)$/;"	f
parse_host_name	parse.c	/^char *parse_host_name (cfile)$/;"	f
parse_if_statement	parse.c	/^int parse_if_statement (result, cfile, lose)$/;"	f
parse_ip6_addr	parse.c	/^parse_ip6_addr(struct parse *cfile, struct iaddr *addr) {$/;"	f
parse_ip6_addr_expr	parse.c	/^parse_ip6_addr_expr(struct expression **expr, $/;"	f
parse_ip6_prefix	parse.c	/^parse_ip6_prefix(struct parse *cfile, struct iaddr *addr, u_int8_t *plen) {$/;"	f
parse_ip_addr	parse.c	/^int parse_ip_addr (cfile, addr)$/;"	f
parse_ip_addr_or_hostname	parse.c	/^int parse_ip_addr_or_hostname (expr, cfile, uniform)$/;"	f
parse_ip_addr_with_subnet	parse.c	/^parse_ip_addr_with_subnet(cfile, match)$/;"	f
parse_key	parse.c	/^int parse_key (struct parse *cfile)$/;"	f
parse_lease_time	parse.c	/^void parse_lease_time (cfile, timep)$/;"	f
parse_non_binary	parse.c	/^int parse_non_binary (expr, cfile, lose, context)$/;"	f
parse_numeric_aggregate	parse.c	/^unsigned char *parse_numeric_aggregate (cfile, buf,$/;"	f
parse_numeric_expression	parse.c	/^int parse_numeric_expression (expr, cfile, lose)$/;"	f
parse_on_statement	parse.c	/^int parse_on_statement (result, cfile, lose)$/;"	f
parse_option_buffer	options.c	/^int parse_option_buffer (options, buffer, length, universe)$/;"	f
parse_option_code_definition	parse.c	/^int parse_option_code_definition (cfile, option)$/;"	f
parse_option_data	parse.c	/^int parse_option_data (expr, cfile, lookups, option)$/;"	f
parse_option_decl	parse.c	/^int parse_option_decl (oc, cfile)$/;"	f
parse_option_name	parse.c	/^parse_option_name (cfile, allocate, known, opt)$/;"	f
parse_option_space_decl	parse.c	/^void parse_option_space_decl (cfile)$/;"	f
parse_option_statement	parse.c	/^int parse_option_statement (result, cfile, lookups, option, op)$/;"	f
parse_option_token	parse.c	/^int parse_option_token (rv, cfile, fmt, expr, uniform, lookups)$/;"	f
parse_options	options.c	/^int parse_options (packet)$/;"	f
parse_semi	parse.c	/^int parse_semi (cfile)$/;"	f
parse_string	parse.c	/^int parse_string (cfile, sptr, lptr)$/;"	f
parse_switch_statement	parse.c	/^int parse_switch_statement (result, cfile, lose)$/;"	f
parse_warn	parse.c	/^int parse_warn (struct parse *cfile, const char *fmt, ...)$/;"	f
parse_zone	parse.c	/^int parse_zone (struct dns_zone *zone, struct parse *cfile)$/;"	f
path_resolv_conf	resolv.c	/^char path_resolv_conf [] = _PATH_RESOLV_CONF;$/;"	v
peek_raw_token	conflex.c	/^peek_raw_token(const char **rval, unsigned *rlen, struct parse *cfile) {$/;"	f
peek_token	conflex.c	/^peek_token(const char **rval, unsigned *rlen, struct parse *cfile) {$/;"	f
piaddr	inet.c	/^piaddr(const struct iaddr addr) {$/;"	f
piaddrcidr	inet.c	/^piaddrcidr(const struct iaddr *addr, unsigned int bits) {$/;"	f
piaddrmask	inet.c	/^piaddrmask(struct iaddr *addr, struct iaddr *mask) {$/;"	f
prepare_option_buffer	options.c	/^prepare_option_buffer(struct universe *universe, struct buffer *bp,$/;"	f	file:
pretty_domain	options.c	/^pretty_domain(char **dst, char *dend, const unsigned char **src,$/;"	f	file:
pretty_escape	options.c	/^pretty_escape(char **dst, char *dend, const unsigned char **src,$/;"	f
pretty_print_option	options.c	/^const char *pretty_print_option (option, data, len, emit_commas, emit_quotes)$/;"	f
pretty_text	options.c	/^pretty_text(char **dst, char *dend, const unsigned char **src,$/;"	f	file:
print_base64	print.c	/^char *print_base64 (const unsigned char *buf, unsigned len,$/;"	f
print_dec_1	print.c	/^char *print_dec_1 (val)$/;"	f
print_dec_2	print.c	/^char *print_dec_2 (val)$/;"	f
print_dns_status	print.c	/^print_dns_status (int direction,$/;"	f
print_dotted_quads	print.c	/^char *print_dotted_quads (len, data)$/;"	f
print_expression	print.c	/^void print_expression (name, expr)$/;"	f
print_hex	print.c	/^char *print_hex(len, data, limit, buf_num)$/;"	f
print_hex_only	print.c	/^void print_hex_only (len, data, limit, buf)$/;"	f
print_hex_or_string	print.c	/^void print_hex_or_string (len, data, limit, buf)$/;"	f
print_hw_addr	print.c	/^char *print_hw_addr (htype, hlen, data)$/;"	f
print_lease	print.c	/^void print_lease (lease)$/;"	f
print_subexpression	print.c	/^static unsigned print_subexpression (expr, buf, len)$/;"	f	file:
print_time	print.c	/^print_time(TIME t)$/;"	f
printable	ns_name.c	/^printable(int ch) {$/;"	f	file:
process_outstanding_timeouts	dispatch.c	/^struct timeval *process_outstanding_timeouts (struct timeval *tvp)$/;"	f
quiet_interface_discovery	discover.c	/^int quiet_interface_discovery;$/;"	v
quotify_buf	print.c	/^char *quotify_buf (const unsigned char *s, unsigned len,$/;"	f
quotify_string	print.c	/^char *quotify_string (const char *s, const char *file, int line)$/;"	f
range2cidr	inet.c	/^range2cidr(struct iaddrcidrnetlist **result, $/;"	f
rcf	tr.c	/^        u_int16_t rcf;			\/* route control field *\/$/;"	m	struct:routing_entry	file:
rcsid	ns_name.c	/^static const char rcsid[] = "$Id: ns_name.c,v 1.2 2009-10-28 04:12:29 sar Exp $";$/;"	v	file:
rdata	dns.c	/^	dns_rdata_t	rdata;$/;"	m	struct:dhcp_ddns_rdata	file:
rdatalist	dns.c	/^	dns_rdatalist_t rdatalist;$/;"	m	struct:dhcp_ddns_rdata	file:
rdataset	dns.c	/^	dns_rdataset_t  rdataset;$/;"	m	struct:dhcp_ddns_rdata	file:
read_num_or_name	conflex.c	/^static enum dhcp_token read_num_or_name (c, cfile)$/;"	f	file:
read_number	conflex.c	/^static enum dhcp_token read_number (c, cfile)$/;"	f	file:
read_resolv_conf	resolv.c	/^void read_resolv_conf (parse_time)$/;"	f
read_string	conflex.c	/^static enum dhcp_token read_string (cfile)$/;"	f	file:
read_whitespace	conflex.c	/^read_whitespace(int c, struct parse *cfile) {$/;"	f	file:
receive_packet	bpf.c	/^ssize_t receive_packet (interface, buf, len, from, hfrom)$/;"	f
receive_packet	dlpi.c	/^ssize_t receive_packet (interface, buf, len, from, hfrom)$/;"	f
receive_packet	lpf.c	/^ssize_t receive_packet (interface, buf, len, from, hfrom)$/;"	f
receive_packet	nit.c	/^ssize_t receive_packet (interface, buf, len, from, hfrom)$/;"	f
receive_packet	socket.c	/^ssize_t receive_packet (interface, buf, len, from, hfrom)$/;"	f
receive_packet	upf.c	/^ssize_t receive_packet (interface, buf, len, from, hfrom)$/;"	f
receive_packet6	socket.c	/^receive_packet6(struct interface_info *interface, $/;"	f
reinitialize_interfaces	discover.c	/^void reinitialize_interfaces ()$/;"	f
relinquish_free_binding_values	alloc.c	/^void relinquish_free_binding_values ()$/;"	f
relinquish_free_expressions	alloc.c	/^void relinquish_free_expressions ()$/;"	f
relinquish_free_option_caches	alloc.c	/^void relinquish_free_option_caches ()$/;"	f
relinquish_free_packets	alloc.c	/^void relinquish_free_packets ()$/;"	f
relinquish_free_pairs	alloc.c	/^void relinquish_free_pairs ()$/;"	f
relinquish_timeouts	dispatch.c	/^void relinquish_timeouts ()$/;"	f
remote_port	discover.c	/^u_int16_t remote_port;$/;"	v
repudiate_zone	dns.c	/^void repudiate_zone (struct dns_zone **zone)$/;"	f
restore_parse_state	conflex.c	/^restore_parse_state(struct parse *cfile) {$/;"	f
root_group	memory.c	/^struct group *root_group;$/;"	v	typeref:struct:group
routing_entry	tr.c	/^struct routing_entry {$/;"	s	file:
routing_info	tr.c	/^static struct routing_entry *routing_info = NULL;$/;"	v	typeref:struct:routing_entry	file:
routing_timeout	tr.c	/^static int routing_timeout = 10;$/;"	v	file:
routing_timer	tr.c	/^static struct timeval routing_timer;$/;"	v	typeref:struct:timeval	file:
rseg	tr.c	/^        u_int16_t rseg[8];		\/* routing registers *\/$/;"	m	struct:routing_entry	file:
save_fqdn6_option	options.c	/^save_fqdn6_option(struct universe *universe, struct option_state *options,$/;"	f
save_hashed_option	options.c	/^save_hashed_option(struct universe *universe, struct option_state *options,$/;"	f
save_linked_option	options.c	/^save_linked_option(struct universe *universe, struct option_state *options,$/;"	f
save_option	options.c	/^save_option(struct universe *universe, struct option_state *options,$/;"	f
save_option_buffer	options.c	/^save_option_buffer(struct universe *universe, struct option_state *options,$/;"	f
save_parse_state	conflex.c	/^save_parse_state(struct parse *cfile) {$/;"	f
save_source_routing	tr.c	/^static void save_source_routing(trh, interface)$/;"	f	file:
search_subencapsulation	options.c	/^search_subencapsulation(struct data_string *result, struct packet *packet,$/;"	f	file:
send_packet	bpf.c	/^ssize_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet	dlpi.c	/^ssize_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet	lpf.c	/^ssize_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet	nit.c	/^ssize_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet	raw.c	/^size_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet	socket.c	/^ssize_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet	socket.c	59;"	d	file:
send_packet	upf.c	/^ssize_t send_packet (interface, packet, raw, len, from, to, hto)$/;"	f
send_packet6	socket.c	/^ssize_t send_packet6(struct interface_info *interface,$/;"	f
set_option	options.c	/^void set_option (universe, options, option, op)$/;"	f
set_time	dispatch.c	/^void set_time(TIME t)$/;"	f
setup_fallback	discover.c	/^int setup_fallback (struct interface_info **fp, const char *file, int line)$/;"	f
skip_to_eol	conflex.c	/^static void skip_to_eol (cfile)$/;"	f	file:
skip_to_rbrace	parse.c	/^void skip_to_rbrace (cfile, brace_count)$/;"	f
skip_to_semi	parse.c	/^void skip_to_semi (cfile)$/;"	f
sock	discover.c	/^	int sock;		\/* file descriptor used to get information *\/$/;"	m	struct:iface_conf_list	file:
sock	discover.c	/^	int sock;	\/* file descriptor used to get information *\/$/;"	m	struct:iface_conf_list	file:
sockaddr_storage	discover.c	177;"	d	file:
special	ns_name.c	/^special(int ch) {$/;"	f	file:
ss_family	discover.c	178;"	d	file:
ss_family	discover.c	205;"	d	file:
store_option	options.c	/^store_option(struct data_string *result, struct universe *universe,$/;"	f
store_options	options.c	/^store_options(int *ocount,$/;"	f
store_options6	options.c	/^store_options6(char *buf, int buflen, $/;"	f
strgetmsg	dlpi.c	/^static int strgetmsg (fd, ctlp, datap, flagsp, caller)$/;"	f	file:
strioctl	dlpi.c	/^strioctl (fd, cmd, timeout, len, dp)$/;"	f	file:
subnet_number	inet.c	/^struct iaddr subnet_number (addr, mask)$/;"	f
suboption_foreach	options.c	/^void suboption_foreach (struct packet *packet, struct lease *lease,$/;"	f
supersede_group	memory.c	/^isc_result_t supersede_group (struct group_object *group, int writep)$/;"	f
supports_multiple_interfaces	bpf.c	/^int supports_multiple_interfaces (ip)$/;"	f
supports_multiple_interfaces	dlpi.c	/^int supports_multiple_interfaces (ip)$/;"	f
supports_multiple_interfaces	lpf.c	/^int supports_multiple_interfaces (ip)$/;"	f
supports_multiple_interfaces	nit.c	/^int supports_multiple_interfaces (ip)$/;"	f
supports_multiple_interfaces	socket.c	/^int supports_multiple_interfaces (ip)$/;"	f
supports_multiple_interfaces	upf.c	/^int supports_multiple_interfaces (ip)$/;"	f
timeouts	dispatch.c	/^struct timeout *timeouts;$/;"	v	typeref:struct:timeout
tkey_free	dns.c	/^void tkey_free (ns_tsig_key **key)$/;"	f
token_indent_data_string	print.c	/^int token_indent_data_string (FILE *file, int col, int indent,$/;"	f
token_print_indent	print.c	/^int token_print_indent (FILE *file, int col, int indent,$/;"	f
token_print_indent_concat	print.c	/^int token_print_indent_concat (FILE *file, int col,  int indent,$/;"	f
tr_broadcast	tr.c	/^static unsigned char tr_broadcast[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };$/;"	v	file:
trace_ddns_init	dns.c	/^trace_ddns_init()$/;"	f
trace_ddns_input	dns.c	/^trace_type_t *trace_ddns_input;$/;"	v
trace_ddns_input_read	dns.c	/^trace_ddns_input_read(trace_type_t *ttype, unsigned length,$/;"	f	file:
trace_ddns_input_stop	dns.c	/^trace_ddns_input_stop(trace_type_t *ttype)$/;"	f	file:
trace_ddns_input_write	dns.c	/^trace_ddns_input_write(dhcp_ddns_cb_t *ddns_cb, isc_result_t result)$/;"	f
trace_ddns_output	dns.c	/^trace_type_t *trace_ddns_output;$/;"	v
trace_ddns_output_read	dns.c	/^trace_ddns_output_read(trace_type_t *ttype, unsigned length,$/;"	f	file:
trace_ddns_output_stop	dns.c	/^trace_ddns_output_stop(trace_type_t *ttype)$/;"	f	file:
trace_ddns_output_write	dns.c	/^trace_ddns_output_write(dns_client_t *client, dns_rdataclass_t rdclass,$/;"	f
trace_icmp_input	icmp.c	/^trace_type_t *trace_icmp_input;$/;"	v
trace_icmp_input_input	icmp.c	/^void trace_icmp_input_input (trace_type_t *ttype, unsigned length, char *buf)$/;"	f
trace_icmp_input_stop	icmp.c	/^void trace_icmp_input_stop (trace_type_t *ttype) { }$/;"	f
trace_icmp_output	icmp.c	/^trace_type_t *trace_icmp_output;$/;"	v
trace_icmp_output_input	icmp.c	/^void trace_icmp_output_input (trace_type_t *ttype, unsigned length, char *buf)$/;"	f
trace_icmp_output_stop	icmp.c	/^void trace_icmp_output_stop (trace_type_t *ttype) { }$/;"	f
trace_inpacket_input	ctrace.c	/^void trace_inpacket_input (trace_type_t *ttype, unsigned len, char *buf)$/;"	f
trace_inpacket_stash	ctrace.c	/^void trace_inpacket_stash (struct interface_info *interface,$/;"	f
trace_inpacket_stop	ctrace.c	/^void trace_inpacket_stop (trace_type_t *ttype) { }$/;"	f
trace_interface_input	ctrace.c	/^void trace_interface_input (trace_type_t *ttype, unsigned len, char *buf)$/;"	f
trace_interface_register	ctrace.c	/^void trace_interface_register (trace_type_t *ttype, struct interface_info *ip)$/;"	f
trace_interface_stop	ctrace.c	/^void trace_interface_stop (trace_type_t *ttype) {$/;"	f
trace_outpacket_input	ctrace.c	/^void trace_outpacket_input (trace_type_t *ttype, unsigned len, char *buf)$/;"	f
trace_outpacket_stop	ctrace.c	/^void trace_outpacket_stop (trace_type_t *ttype) { }$/;"	f
trace_packet_send	ctrace.c	/^ssize_t trace_packet_send (struct interface_info *interface,$/;"	f
trace_seed_input	ctrace.c	/^void trace_seed_input (trace_type_t *ttype, unsigned length, char *buf)$/;"	f
trace_seed_stash	ctrace.c	/^void trace_seed_stash (trace_type_t *ttype, unsigned seed)$/;"	f
trace_seed_stop	ctrace.c	/^void trace_seed_stop (trace_type_t *ttype) { }$/;"	f
unget_char	conflex.c	/^unget_char(struct parse *cfile, int c) {$/;"	f	file:
universe_count	tables.c	/^int universe_count, universe_max;$/;"	v
universe_hash	tables.c	/^universe_hash_t *universe_hash;$/;"	v
universe_max	tables.c	/^int universe_count, universe_max;$/;"	v
universes	tables.c	/^struct universe **universes;$/;"	v	typeref:struct:universe
unset	tree.c	/^int unset (struct binding_scope *scope, const char *name)$/;"	f
validate_port	inet.c	/^validate_port(char *port) {$/;"	f
vendor_cfg_option	options.c	/^struct option *vendor_cfg_option;$/;"	v	typeref:struct:option
vendor_class_options	tables.c	/^static struct option vendor_class_options[] =  {$/;"	v	typeref:struct:option	file:
vendor_class_universe	tables.c	/^struct universe vendor_class_universe;$/;"	v	typeref:struct:universe
vendor_options	tables.c	/^static struct option vendor_options[] = {$/;"	v	typeref:struct:option	file:
vendor_universe	tables.c	/^struct universe vendor_universe;$/;"	v	typeref:struct:universe
vsio_options	options.c	/^vsio_options(struct option_cache *oc,$/;"	f	file:
vsio_options	tables.c	/^static struct option vsio_options[] = {$/;"	v	typeref:struct:option	file:
vsio_state	options.c	/^struct vsio_state {$/;"	s	file:
vsio_universe	tables.c	/^struct universe vsio_universe;$/;"	v	typeref:struct:universe
wrapsum	packet.c	/^u_int32_t wrapsum (sum)$/;"	f
write_expression	tree.c	/^int write_expression (file, expr, col, indent, firstp)$/;"	f
write_statements	execute.c	/^void write_statements (file, statements, indent)$/;"	f
