!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
DHCRELAY_USAGE	dhcrelay.c	141;"	d	file:
DHCRELAY_USAGE	dhcrelay.c	155;"	d	file:
add_agent_options	dhcrelay.c	/^int add_agent_options = 0;	\/* If nonzero, add relay agent options. *\/$/;"	v
add_relay_agent_options	dhcrelay.c	/^add_relay_agent_options(struct interface_info *ip, struct dhcp_packet *packet,$/;"	f	file:
agent_option_errors	dhcrelay.c	/^int agent_option_errors = 0;    \/* Number of packets forwarded without$/;"	v
agent_relay_mode	dhcrelay.c	/^       discard } agent_relay_mode = forward_and_replace;$/;"	v	typeref:enum:__anon1
arr	dhcrelay.c	/^static const char arr[] = "All rights reserved.";$/;"	v	file:
bad_circuit_id	dhcrelay.c	/^int bad_circuit_id = 0;		\/* Circuit ID option in matching RAI option$/;"	v
bogus_agent_drops	dhcrelay.c	/^int bogus_agent_drops = 0;	\/* Packets dropped because agent option$/;"	v
bogus_giaddr_drops	dhcrelay.c	/^int bogus_giaddr_drops = 0;	\/* Packets sent to us to relay back to a$/;"	v
bootp	dhcrelay.c	/^bootp(struct packet *packet) {$/;"	f
check_collection	dhcrelay.c	/^check_collection(struct packet *p, struct lease *l, struct collection *c) {$/;"	f
classify	dhcrelay.c	/^classify(struct packet *p, struct class *c) {$/;"	f
client_packet_errors	dhcrelay.c	/^int client_packet_errors = 0;	\/* Errors sending packets to clients. *\/$/;"	v
client_packets_relayed	dhcrelay.c	/^int client_packets_relayed = 0;	\/* Packets relayed from client to server. *\/$/;"	v
copyright	dhcrelay.c	/^static const char copyright[] =$/;"	v	file:
corrupt_agent_options	dhcrelay.c	/^int corrupt_agent_options = 0;	\/* Number of packets dropped because$/;"	v
default_lease_time	dhcrelay.c	/^TIME default_lease_time = 43200; \/* 12 hours... *\/$/;"	v
dhcp	dhcrelay.c	/^dhcp(struct packet *packet) {$/;"	f
dhcp_max_agent_option_packet_length	dhcrelay.c	/^int dhcp_max_agent_option_packet_length = DHCP_MTU_MIN;$/;"	v
dhcp_set_control_state	dhcrelay.c	/^dhcp_set_control_state(control_object_state_t oldstate,$/;"	f
dhcpv6	dhcrelay.c	/^dhcpv6(struct packet *packet) {$/;"	f
discard	dhcrelay.c	/^       discard } agent_relay_mode = forward_and_replace;$/;"	e	enum:__anon1	file:
do_relay4	dhcrelay.c	/^do_relay4(struct interface_info *ip, struct dhcp_packet *packet,$/;"	f	file:
downstreams	dhcrelay.c	/^} *downstreams, *upstreams;$/;"	v	typeref:struct:stream_list
drop_agent_mismatches	dhcrelay.c	/^int drop_agent_mismatches = 0;	\/* If nonzero, drop server replies that$/;"	v
find_class	dhcrelay.c	/^find_class(struct class **class, const char *c1, const char *c2, int i) {$/;"	f
find_interface_by_agent_option	dhcrelay.c	/^find_interface_by_agent_option(struct dhcp_packet *packet,$/;"	f	file:
forward_and_append	dhcrelay.c	/^enum { forward_and_append,	\/* Forward and append our own relay option. *\/$/;"	e	enum:__anon1	file:
forward_and_replace	dhcrelay.c	/^       forward_and_replace,	\/* Forward, but replace theirs with ours. *\/$/;"	e	enum:__anon1	file:
forward_untouched	dhcrelay.c	/^       forward_untouched,	\/* Forward without changes. *\/$/;"	e	enum:__anon1	file:
global_options	dhcrelay.c	/^struct tree_cache *global_options[256];$/;"	v	typeref:struct:tree_cache
id	dhcrelay.c	/^	int id;$/;"	m	struct:stream_list	file:
ifp	dhcrelay.c	/^	struct interface_info *ifp;$/;"	m	struct:stream_list	typeref:struct:stream_list::interface_info	file:
lexchar	dhcrelay.c	/^int lexchar;$/;"	v
lexline	dhcrelay.c	/^int lexline;$/;"	v
link	dhcrelay.c	/^	struct sockaddr_in6 link;$/;"	m	struct:stream_list	typeref:struct:stream_list::sockaddr_in6	file:
local_port	dhcrelay.c	/^u_int16_t local_port;$/;"	v
main	dhcrelay.c	/^main(int argc, char **argv) {$/;"	f
max_hop_count	dhcrelay.c	/^int max_hop_count = 10;		\/* Maximum hop count *\/$/;"	v
max_lease_time	dhcrelay.c	/^TIME max_lease_time = 86400; \/* 24 hours... *\/$/;"	v
message	dhcrelay.c	/^static const char message[] =$/;"	v	file:
missing_agent_option	dhcrelay.c	/^int missing_agent_option = 0;	\/* Number of packets dropped because no$/;"	v
missing_circuit_id	dhcrelay.c	/^int missing_circuit_id = 0;	\/* Circuit ID option in matching RAI option$/;"	v
next	dhcrelay.c	/^	struct server_list *next;$/;"	m	struct:server_list	typeref:struct:server_list::server_list	file:
next	dhcrelay.c	/^	struct stream_list *next;$/;"	m	struct:stream_list	typeref:struct:stream_list::stream_list	file:
no_dhcrelay_pid	dhcrelay.c	/^isc_boolean_t no_dhcrelay_pid = ISC_FALSE;$/;"	v
no_pid_file	dhcrelay.c	/^isc_boolean_t no_pid_file = ISC_FALSE;$/;"	v
parse_allow_deny	dhcrelay.c	/^parse_allow_deny(struct option_cache **oc, struct parse *p, int i) {$/;"	f
parse_downstream	dhcrelay.c	/^parse_downstream(char *arg) {$/;"	f	file:
parse_upstream	dhcrelay.c	/^parse_upstream(char *arg) {$/;"	f	file:
path_dhcrelay_pid	dhcrelay.c	/^const char *path_dhcrelay_pid = _PATH_DHCRELAY_PID;$/;"	v
process_down6	dhcrelay.c	/^process_down6(struct packet *packet) {$/;"	f	file:
process_up6	dhcrelay.c	/^process_up6(struct packet *packet, struct stream_list *dp) {$/;"	f	file:
remote_port	dhcrelay.c	/^u_int16_t remote_port;$/;"	v
requested_opts	dhcrelay.c	/^struct option *requested_opts[2];$/;"	v	typeref:struct:option
required_forw_opts	dhcrelay.c	/^static const int required_forw_opts[] = {$/;"	v	file:
server_list	dhcrelay.c	/^struct server_list {$/;"	s	file:
server_packet_errors	dhcrelay.c	/^int server_packet_errors = 0;	\/* Errors sending packets to servers. *\/$/;"	v
server_packets_relayed	dhcrelay.c	/^int server_packets_relayed = 0;	\/* Packets relayed from server to client. *\/$/;"	v
servers	dhcrelay.c	/^} *servers;$/;"	v	typeref:struct:server_list
setup_streams	dhcrelay.c	/^setup_streams(void) {$/;"	f	file:
stream_list	dhcrelay.c	/^struct stream_list {$/;"	s	file:
strip_relay_agent_options	dhcrelay.c	/^strip_relay_agent_options(struct interface_info *in,$/;"	f	file:
tlname	dhcrelay.c	/^char *tlname;$/;"	v
to	dhcrelay.c	/^	struct sockaddr_in to;$/;"	m	struct:server_list	typeref:struct:server_list::sockaddr_in	file:
token_line	dhcrelay.c	/^char *token_line;$/;"	v
upstreams	dhcrelay.c	/^} *downstreams, *upstreams;$/;"	v	typeref:struct:stream_list
url	dhcrelay.c	/^static const char url[] =$/;"	v	file:
usage	dhcrelay.c	/^static void usage() {$/;"	f	file:
use_if_id	dhcrelay.c	/^isc_boolean_t use_if_id = ISC_FALSE;$/;"	v
