!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
bootp	omshell.c	/^void bootp (struct packet *packet) { }$/;"	f
check	omshell.c	/^static void check (isc_result_t status, const char *func) {$/;"	f	file:
check_collection	omshell.c	/^int check_collection (struct packet *p, struct lease *l, struct collection *c)$/;"	f
classify	omshell.c	/^void classify (struct packet *packet, struct class *class) { }$/;"	f
dhcp	omshell.c	/^void dhcp (struct packet *packet) { }$/;"	f
dhcp_set_control_state	omshell.c	/^isc_result_t dhcp_set_control_state (control_object_state_t oldstate,$/;"	f
dhcpctl_callback_destroy	callback.c	/^isc_result_t dhcpctl_callback_destroy (omapi_object_t *h,$/;"	f
dhcpctl_callback_get_value	callback.c	/^isc_result_t dhcpctl_callback_get_value (omapi_object_t *h,$/;"	f
dhcpctl_callback_set_value	callback.c	/^isc_result_t dhcpctl_callback_set_value (omapi_object_t *h,$/;"	f
dhcpctl_callback_signal_handler	callback.c	/^isc_result_t dhcpctl_callback_signal_handler (omapi_object_t *o,$/;"	f
dhcpctl_callback_stuff_values	callback.c	/^isc_result_t dhcpctl_callback_stuff_values (omapi_object_t *c,$/;"	f
dhcpctl_callback_type	dhcpctl.c	/^omapi_object_type_t *dhcpctl_callback_type;$/;"	v
dhcpctl_connect	dhcpctl.c	/^dhcpctl_status dhcpctl_connect (dhcpctl_handle *connection,$/;"	f
dhcpctl_data_string_dereference	dhcpctl.c	/^isc_result_t dhcpctl_data_string_dereference (dhcpctl_data_string *vp,$/;"	f
dhcpctl_get_boolean	dhcpctl.c	/^dhcpctl_status dhcpctl_get_boolean (int *result,$/;"	f
dhcpctl_get_value	dhcpctl.c	/^dhcpctl_status dhcpctl_get_value (dhcpctl_data_string *result,$/;"	f
dhcpctl_initialize	dhcpctl.c	/^dhcpctl_status dhcpctl_initialize ()$/;"	f
dhcpctl_new_authenticator	remote.c	/^dhcpctl_status dhcpctl_new_authenticator (dhcpctl_handle *h,$/;"	f
dhcpctl_new_object	remote.c	/^dhcpctl_status dhcpctl_new_object (dhcpctl_handle *h,$/;"	f
dhcpctl_object_refresh	dhcpctl.c	/^dhcpctl_status dhcpctl_object_refresh (dhcpctl_handle connection,$/;"	f
dhcpctl_object_remove	dhcpctl.c	/^dhcpctl_status dhcpctl_object_remove (dhcpctl_handle connection,$/;"	f
dhcpctl_object_update	dhcpctl.c	/^dhcpctl_status dhcpctl_object_update (dhcpctl_handle connection,$/;"	f
dhcpctl_open_object	remote.c	/^dhcpctl_status dhcpctl_open_object (dhcpctl_handle h,$/;"	f
dhcpctl_remote_destroy	remote.c	/^isc_result_t dhcpctl_remote_destroy (omapi_object_t *h,$/;"	f
dhcpctl_remote_get_value	remote.c	/^isc_result_t dhcpctl_remote_get_value (omapi_object_t *h,$/;"	f
dhcpctl_remote_set_value	remote.c	/^isc_result_t dhcpctl_remote_set_value (omapi_object_t *h,$/;"	f
dhcpctl_remote_signal_handler	remote.c	/^isc_result_t dhcpctl_remote_signal_handler (omapi_object_t *o,$/;"	f
dhcpctl_remote_stuff_values	remote.c	/^isc_result_t dhcpctl_remote_stuff_values (omapi_object_t *c,$/;"	f
dhcpctl_remote_type	dhcpctl.c	/^omapi_object_type_t *dhcpctl_remote_type;$/;"	v
dhcpctl_set_boolean_value	dhcpctl.c	/^dhcpctl_status dhcpctl_set_boolean_value (dhcpctl_handle h, int value,$/;"	f
dhcpctl_set_callback	callback.c	/^dhcpctl_status dhcpctl_set_callback (dhcpctl_handle h, void *data,$/;"	f
dhcpctl_set_data_value	dhcpctl.c	/^dhcpctl_status dhcpctl_set_data_value (dhcpctl_handle h,$/;"	f
dhcpctl_set_int_value	dhcpctl.c	/^dhcpctl_status dhcpctl_set_int_value (dhcpctl_handle h, int value,$/;"	f
dhcpctl_set_null_value	dhcpctl.c	/^dhcpctl_status dhcpctl_set_null_value (dhcpctl_handle h,$/;"	f
dhcpctl_set_string_value	dhcpctl.c	/^dhcpctl_status dhcpctl_set_string_value (dhcpctl_handle h, const char *value,$/;"	f
dhcpctl_set_value	dhcpctl.c	/^dhcpctl_status dhcpctl_set_value (dhcpctl_handle h, dhcpctl_data_string value,$/;"	f
dhcpctl_wait_for_completion	dhcpctl.c	/^dhcpctl_status dhcpctl_wait_for_completion (dhcpctl_handle h,$/;"	f
dhcpv6	omshell.c	/^void dhcpv6(struct packet *packet) { }$/;"	f
down	cltest.c	/^enum modes { up, down, undefined };$/;"	e	enum:modes	file:
find_class	omshell.c	/^isc_result_t find_class (struct class **c, const char *n, const char *f, int l)$/;"	f
main	cltest.c	/^int main (argc, argv)$/;"	f
main	omshell.c	/^main(int argc, char **argv) {$/;"	f
modes	cltest.c	/^enum modes { up, down, undefined };$/;"	g	file:
parse_allow_deny	omshell.c	/^int parse_allow_deny (struct option_cache **oc, struct parse *cfile, int flag)$/;"	f
undefined	cltest.c	/^enum modes { up, down, undefined };$/;"	e	enum:modes	file:
up	cltest.c	/^enum modes { up, down, undefined };$/;"	e	enum:modes	file:
usage	cltest.c	/^static void usage (char *s) {$/;"	f	file:
usage	omshell.c	/^static void usage (char *s) {$/;"	f	file:
